
W5500_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003508  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003714  08003714  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003714  08003714  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003714  08003714  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800371c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001e4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e4dd  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001483  00000000  00000000  0002e5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003c8  00000000  00000000  0002fa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003a4  00000000  00000000  0002fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ae62  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007d1e  00000000  00000000  0004affe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008fd6f  00000000  00000000  00052d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001260  00000000  00000000  000e2a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000e3cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080036a0 	.word	0x080036a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080036a0 	.word	0x080036a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int baudrate)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 80002aa:	480e      	ldr	r0, [pc, #56]	; (80002e4 <Console_Init+0x44>)
 80002ac:	f001 fa51 	bl	8001752 <USART_Config_Reset>
	 serial.Port = USART1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <Console_Init+0x44>)
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <Console_Init+0x48>)
 80002b4:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <Console_Init+0x44>)
 80002ba:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 80002bc:	2201      	movs	r2, #1
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <Console_Init+0x44>)
 80002c0:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <Console_Init+0x44>)
 80002c8:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PA9;
 80002ca:	2209      	movs	r2, #9
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <Console_Init+0x44>)
 80002ce:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PA10;
 80002d0:	220a      	movs	r2, #10
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <Console_Init+0x44>)
 80002d4:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 80002d6:	4803      	ldr	r0, [pc, #12]	; (80002e4 <Console_Init+0x44>)
 80002d8:	f001 ff58 	bl	800218c <USART_Init>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000078 	.word	0x20000078
 80002e8:	40011000 	.word	0x40011000

080002ec <printConsole>:

 void printConsole(char *msg, ...)
{
 80002ec:	b40f      	push	{r0, r1, r2, r3}
 80002ee:	b580      	push	{r7, lr}
 80002f0:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 80002f4:	b086      	sub	sp, #24
 80002f6:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 80002f8:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80002fc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000300:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000304:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8000308:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800030a:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800030e:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 8000312:	f107 0318 	add.w	r3, r7, #24
 8000316:	3b14      	subs	r3, #20
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	f507 511c 	add.w	r1, r7, #9984	; 0x2700
 800031e:	f101 0120 	add.w	r1, r1, #32
 8000322:	6809      	ldr	r1, [r1, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fd35 	bl	8002d94 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 800032a:	2300      	movs	r3, #0
 800032c:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000330:	f102 0214 	add.w	r2, r2, #20
 8000334:	6013      	str	r3, [r2, #0]
 8000336:	e020      	b.n	800037a <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 8000338:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800033c:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 8000340:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000344:	f103 0314 	add.w	r3, r3, #20
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4413      	add	r3, r2
 800034c:	781a      	ldrb	r2, [r3, #0]
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <printConsole+0xc0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 8000354:	bf00      	nop
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <printConsole+0xc0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f8      	beq.n	8000356 <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 8000364:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000368:	f103 0314 	add.w	r3, r3, #20
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000374:	f102 0214 	add.w	r2, r2, #20
 8000378:	6013      	str	r3, [r2, #0]
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	3b14      	subs	r3, #20
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff35 	bl	80001f0 <strlen>
 8000386:	4603      	mov	r3, r0
 8000388:	1e5a      	subs	r2, r3, #1
 800038a:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800038e:	f103 0314 	add.w	r3, r3, #20
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d2cf      	bcs.n	8000338 <printConsole+0x4c>
	}
}
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003a8:	b004      	add	sp, #16
 80003aa:	4770      	bx	lr
 80003ac:	20000078 	.word	0x20000078

080003b0 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 80003ba:	2201      	movs	r2, #1
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	615a      	str	r2, [r3, #20]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	2101      	movs	r1, #1
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	43d2      	mvns	r2, r2
 80003ec:	401a      	ands	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	615a      	str	r2, [r3, #20]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a25      	ldr	r2, [pc, #148]	; (80004a0 <GPIO_Clock_Enable+0xa0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000410:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
 800041c:	e039      	b.n	8000492 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <GPIO_Clock_Enable+0xa8>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
 8000432:	e02e      	b.n	8000492 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <GPIO_Clock_Enable+0xac>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a18      	ldr	r2, [pc, #96]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
 8000448:	e023      	b.n	8000492 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <GPIO_Clock_Enable+0xb0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a13      	ldr	r2, [pc, #76]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000458:	f043 0308 	orr.w	r3, r3, #8
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
 800045e:	e018      	b.n	8000492 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <GPIO_Clock_Enable+0xb4>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
 8000474:	e00d      	b.n	8000492 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <GPIO_Clock_Enable+0xb8>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <GPIO_Clock_Enable+0xa4>)
 8000484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
 800048a:	e002      	b.n	8000492 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
 8000490:	e000      	b.n	8000494 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021c00 	.word	0x40021c00

080004bc <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	4608      	mov	r0, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	461a      	mov	r2, r3
 80004ca:	4603      	mov	r3, r0
 80004cc:	70fb      	strb	r3, [r7, #3]
 80004ce:	460b      	mov	r3, r1
 80004d0:	70bb      	strb	r3, [r7, #2]
 80004d2:	4613      	mov	r3, r2
 80004d4:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff ff92 	bl	8000400 <GPIO_Clock_Enable>
	Port -> MODER &= ~(3 << (pin*2));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	78fa      	ldrb	r2, [r7, #3]
 80004e2:	0052      	lsls	r2, r2, #1
 80004e4:	2103      	movs	r1, #3
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	401a      	ands	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
	Port -> MODER |= mode << (pin*2);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	78b9      	ldrb	r1, [r7, #2]
 80004f8:	78fa      	ldrb	r2, [r7, #3]
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	7879      	ldrb	r1, [r7, #1]
 800050c:	78fa      	ldrb	r2, [r7, #3]
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	431a      	orrs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	7c39      	ldrb	r1, [r7, #16]
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	0052      	lsls	r2, r2, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	7d39      	ldrb	r1, [r7, #20]
 8000532:	78fa      	ldrb	r2, [r7, #3]
 8000534:	0052      	lsls	r2, r2, #1
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	431a      	orrs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b07      	cmp	r3, #7
 8000544:	d80a      	bhi.n	800055c <GPIO_Pin_Init+0xa0>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	7e39      	ldrb	r1, [r7, #24]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 800055a:	e00a      	b.n	8000572 <GPIO_Pin_Init+0xb6>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000560:	7e39      	ldrb	r1, [r7, #24]
 8000562:	78fa      	ldrb	r2, [r7, #3]
 8000564:	3a08      	subs	r2, #8
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	431a      	orrs	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <SPI_Clock_Enable>:

//DMA_Config xDMA_TX;
//DMA_Config xDMA_RX;

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <SPI_Clock_Enable+0x64>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d105      	bne.n	800059e <SPI_Clock_Enable+0x22>
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <SPI_Clock_Enable+0x68>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <SPI_Clock_Enable+0x68>)
 8000598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800059c:	6453      	str	r3, [r2, #68]	; 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <SPI_Clock_Enable+0x6c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d105      	bne.n	80005b4 <SPI_Clock_Enable+0x38>
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <SPI_Clock_Enable+0x68>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <SPI_Clock_Enable+0x68>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <SPI_Clock_Enable+0x70>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d106      	bne.n	80005cc <SPI_Clock_Enable+0x50>
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <SPI_Clock_Enable+0x68>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <SPI_Clock_Enable+0x68>)
 80005c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ca:	e001      	b.n	80005d0 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	73fb      	strb	r3, [r7, #15]
	return retval;
 80005d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40013000 	.word	0x40013000
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40003800 	.word	0x40003800
 80005ec:	40003c00 	.word	0x40003c00

080005f0 <SPI_Config_Reset>:
	return retval;
}


int8_t SPI_Config_Reset(SPI_Config *config)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <SPI_Config_Reset+0xb4>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d105      	bne.n	8000612 <SPI_Config_Reset+0x22>
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SPI_Config_Reset+0xb8>)
 8000608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060a:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SPI_Config_Reset+0xb8>)
 800060c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000610:	6253      	str	r3, [r2, #36]	; 0x24
	if(config ->Port == SPI2)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a25      	ldr	r2, [pc, #148]	; (80006ac <SPI_Config_Reset+0xbc>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d105      	bne.n	8000628 <SPI_Config_Reset+0x38>
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SPI_Config_Reset+0xb8>)
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SPI_Config_Reset+0xb8>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6213      	str	r3, [r2, #32]
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SPI_Config_Reset+0xc0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <SPI_Config_Reset+0x50>
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <SPI_Config_Reset+0xb8>)
 8000634:	6a1b      	ldr	r3, [r3, #32]
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <SPI_Config_Reset+0xb8>)
 8000638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063c:	6213      	str	r3, [r2, #32]
 800063e:	e001      	b.n	8000644 <SPI_Config_Reset+0x54>
	else
		retval = -1;
 8000640:	23ff      	movs	r3, #255	; 0xff
 8000642:	73fb      	strb	r3, [r7, #15]

	config->NSS_Port = GPIOA;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <SPI_Config_Reset+0xc4>)
 8000648:	609a      	str	r2, [r3, #8]
	config->NSS_Pin = 4;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2204      	movs	r2, #4
 800064e:	731a      	strb	r2, [r3, #12]
	config->clock_phase = SPI_Clock_Phase.High_1;
 8000650:	2201      	movs	r2, #1
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	839a      	strh	r2, [r3, #28]
	config->clock_polarity = SPI_Clock_Polarity.High_1;
 8000656:	2202      	movs	r2, #2
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	835a      	strh	r2, [r3, #26]
	config->mode = SPI_Mode.Full_Duplex_Master;
 800065c:	2300      	movs	r3, #0
 800065e:	b29a      	uxth	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	81da      	strh	r2, [r3, #14]
	config->crc = SPI_CRC.Disable;
 8000664:	2200      	movs	r2, #0
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	821a      	strh	r2, [r3, #16]
	config->data_format = SPI_Data_Format.Bit8;
 800066a:	2200      	movs	r2, #0
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	825a      	strh	r2, [r3, #18]
	config->frame_format = SPI_Frame_Format.MSB_First;
 8000670:	2200      	movs	r2, #0
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	829a      	strh	r2, [r3, #20]
	config->dma = SPI_DMA.TX_DMA_Disable | SPI_DMA.RX_DMA_Disable;
 8000676:	2200      	movs	r2, #0
 8000678:	2300      	movs	r3, #0
 800067a:	4313      	orrs	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	b29a      	uxth	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	841a      	strh	r2, [r3, #32]
	config->interrupt = SPI_Interrupt.Disable;
 8000684:	2300      	movs	r3, #0
 8000686:	b29a      	uxth	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	83da      	strh	r2, [r3, #30]
	config->type = SPI_Type.Master;
 800068c:	2204      	movs	r2, #4
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	831a      	strh	r2, [r3, #24]

	return retval;
 8000692:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40013000 	.word	0x40013000
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40003800 	.word	0x40003800
 80006b0:	40003c00 	.word	0x40003c00
 80006b4:	40020000 	.word	0x40020000

080006b8 <SPI_Pin>:


static void SPI_Pin(SPI_Config *config)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af04      	add	r7, sp, #16
 80006be:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a77      	ldr	r2, [pc, #476]	; (80008a4 <SPI_Pin+0x1ec>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f040 8158 	bne.w	800097c <SPI_Pin+0x2c4>
	{
		if(config->mode == 0)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	89db      	ldrh	r3, [r3, #14]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8081 	bne.w	80007d8 <SPI_Pin+0x120>
		{
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	220f      	movs	r2, #15
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10d      	bne.n	80006fe <SPI_Pin+0x46>
 80006e2:	2002      	movs	r0, #2
 80006e4:	2400      	movs	r4, #0
 80006e6:	2303      	movs	r3, #3
 80006e8:	2200      	movs	r2, #0
 80006ea:	2105      	movs	r1, #5
 80006ec:	9102      	str	r1, [sp, #8]
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4623      	mov	r3, r4
 80006f4:	4602      	mov	r2, r0
 80006f6:	2105      	movs	r1, #5
 80006f8:	486b      	ldr	r0, [pc, #428]	; (80008a8 <SPI_Pin+0x1f0>)
 80006fa:	f7ff fedf 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	b29b      	uxth	r3, r3
 8000704:	2217      	movs	r2, #23
 8000706:	4293      	cmp	r3, r2
 8000708:	d10d      	bne.n	8000726 <SPI_Pin+0x6e>
 800070a:	2002      	movs	r0, #2
 800070c:	2400      	movs	r4, #0
 800070e:	2303      	movs	r3, #3
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	9102      	str	r1, [sp, #8]
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4623      	mov	r3, r4
 800071c:	4602      	mov	r2, r0
 800071e:	2103      	movs	r1, #3
 8000720:	4862      	ldr	r0, [pc, #392]	; (80008ac <SPI_Pin+0x1f4>)
 8000722:	f7ff fecb 	bl	80004bc <GPIO_Pin_Init>

			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	b29b      	uxth	r3, r3
 800072c:	2210      	movs	r2, #16
 800072e:	4293      	cmp	r3, r2
 8000730:	d10d      	bne.n	800074e <SPI_Pin+0x96>
 8000732:	2002      	movs	r0, #2
 8000734:	2400      	movs	r4, #0
 8000736:	2303      	movs	r3, #3
 8000738:	2200      	movs	r2, #0
 800073a:	2105      	movs	r1, #5
 800073c:	9102      	str	r1, [sp, #8]
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4623      	mov	r3, r4
 8000744:	4602      	mov	r2, r0
 8000746:	2106      	movs	r1, #6
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <SPI_Pin+0x1f0>)
 800074a:	f7ff feb7 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	799b      	ldrb	r3, [r3, #6]
 8000752:	b29b      	uxth	r3, r3
 8000754:	2218      	movs	r2, #24
 8000756:	4293      	cmp	r3, r2
 8000758:	d10d      	bne.n	8000776 <SPI_Pin+0xbe>
 800075a:	2002      	movs	r0, #2
 800075c:	2400      	movs	r4, #0
 800075e:	2303      	movs	r3, #3
 8000760:	2200      	movs	r2, #0
 8000762:	2105      	movs	r1, #5
 8000764:	9102      	str	r1, [sp, #8]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4623      	mov	r3, r4
 800076c:	4602      	mov	r2, r0
 800076e:	2104      	movs	r1, #4
 8000770:	484e      	ldr	r0, [pc, #312]	; (80008ac <SPI_Pin+0x1f4>)
 8000772:	f7ff fea3 	bl	80004bc <GPIO_Pin_Init>

			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	b29b      	uxth	r3, r3
 800077c:	2211      	movs	r2, #17
 800077e:	4293      	cmp	r3, r2
 8000780:	d10d      	bne.n	800079e <SPI_Pin+0xe6>
 8000782:	2002      	movs	r0, #2
 8000784:	2400      	movs	r4, #0
 8000786:	2303      	movs	r3, #3
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	9102      	str	r1, [sp, #8]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	4623      	mov	r3, r4
 8000794:	4602      	mov	r2, r0
 8000796:	2107      	movs	r1, #7
 8000798:	4843      	ldr	r0, [pc, #268]	; (80008a8 <SPI_Pin+0x1f0>)
 800079a:	f7ff fe8f 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	2219      	movs	r2, #25
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10d      	bne.n	80007c6 <SPI_Pin+0x10e>
 80007aa:	2002      	movs	r0, #2
 80007ac:	2400      	movs	r4, #0
 80007ae:	2303      	movs	r3, #3
 80007b0:	2200      	movs	r2, #0
 80007b2:	2105      	movs	r1, #5
 80007b4:	9102      	str	r1, [sp, #8]
 80007b6:	9201      	str	r2, [sp, #4]
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4623      	mov	r3, r4
 80007bc:	4602      	mov	r2, r0
 80007be:	2105      	movs	r1, #5
 80007c0:	483a      	ldr	r0, [pc, #232]	; (80008ac <SPI_Pin+0x1f4>)
 80007c2:	f7ff fe7b 	bl	80004bc <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007d4:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 80007d6:	e393      	b.n	8000f00 <SPI_Pin+0x848>
		else if(config->mode == 1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	89db      	ldrh	r3, [r3, #14]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d167      	bne.n	80008b0 <SPI_Pin+0x1f8>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	220f      	movs	r2, #15
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d10d      	bne.n	8000808 <SPI_Pin+0x150>
 80007ec:	2002      	movs	r0, #2
 80007ee:	2400      	movs	r4, #0
 80007f0:	2303      	movs	r3, #3
 80007f2:	2200      	movs	r2, #0
 80007f4:	2105      	movs	r1, #5
 80007f6:	9102      	str	r1, [sp, #8]
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	4623      	mov	r3, r4
 80007fe:	4602      	mov	r2, r0
 8000800:	2105      	movs	r1, #5
 8000802:	4829      	ldr	r0, [pc, #164]	; (80008a8 <SPI_Pin+0x1f0>)
 8000804:	f7ff fe5a 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	b29b      	uxth	r3, r3
 800080e:	2217      	movs	r2, #23
 8000810:	4293      	cmp	r3, r2
 8000812:	d10d      	bne.n	8000830 <SPI_Pin+0x178>
 8000814:	2002      	movs	r0, #2
 8000816:	2400      	movs	r4, #0
 8000818:	2303      	movs	r3, #3
 800081a:	2200      	movs	r2, #0
 800081c:	2105      	movs	r1, #5
 800081e:	9102      	str	r1, [sp, #8]
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	4623      	mov	r3, r4
 8000826:	4602      	mov	r2, r0
 8000828:	2103      	movs	r1, #3
 800082a:	4820      	ldr	r0, [pc, #128]	; (80008ac <SPI_Pin+0x1f4>)
 800082c:	f7ff fe46 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	795b      	ldrb	r3, [r3, #5]
 8000834:	b29b      	uxth	r3, r3
 8000836:	2211      	movs	r2, #17
 8000838:	4293      	cmp	r3, r2
 800083a:	d10d      	bne.n	8000858 <SPI_Pin+0x1a0>
 800083c:	2002      	movs	r0, #2
 800083e:	2400      	movs	r4, #0
 8000840:	2303      	movs	r3, #3
 8000842:	2200      	movs	r2, #0
 8000844:	2105      	movs	r1, #5
 8000846:	9102      	str	r1, [sp, #8]
 8000848:	9201      	str	r2, [sp, #4]
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4623      	mov	r3, r4
 800084e:	4602      	mov	r2, r0
 8000850:	2107      	movs	r1, #7
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <SPI_Pin+0x1f0>)
 8000854:	f7ff fe32 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	b29b      	uxth	r3, r3
 800085e:	2219      	movs	r2, #25
 8000860:	4293      	cmp	r3, r2
 8000862:	d10d      	bne.n	8000880 <SPI_Pin+0x1c8>
 8000864:	2002      	movs	r0, #2
 8000866:	2400      	movs	r4, #0
 8000868:	2303      	movs	r3, #3
 800086a:	2200      	movs	r2, #0
 800086c:	2105      	movs	r1, #5
 800086e:	9102      	str	r1, [sp, #8]
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4623      	mov	r3, r4
 8000876:	4602      	mov	r2, r0
 8000878:	2105      	movs	r1, #5
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <SPI_Pin+0x1f4>)
 800087c:	f7ff fe1e 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800088e:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	e32e      	b.n	8000f00 <SPI_Pin+0x848>
 80008a2:	bf00      	nop
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400
		else if(config->mode == 2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	89db      	ldrh	r3, [r3, #14]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	f040 8323 	bne.w	8000f00 <SPI_Pin+0x848>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	220f      	movs	r2, #15
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10d      	bne.n	80008e2 <SPI_Pin+0x22a>
 80008c6:	2002      	movs	r0, #2
 80008c8:	2400      	movs	r4, #0
 80008ca:	2303      	movs	r3, #3
 80008cc:	2200      	movs	r2, #0
 80008ce:	2105      	movs	r1, #5
 80008d0:	9102      	str	r1, [sp, #8]
 80008d2:	9201      	str	r2, [sp, #4]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4623      	mov	r3, r4
 80008d8:	4602      	mov	r2, r0
 80008da:	2105      	movs	r1, #5
 80008dc:	48a0      	ldr	r0, [pc, #640]	; (8000b60 <SPI_Pin+0x4a8>)
 80008de:	f7ff fded 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	2217      	movs	r2, #23
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10d      	bne.n	800090a <SPI_Pin+0x252>
 80008ee:	2002      	movs	r0, #2
 80008f0:	2400      	movs	r4, #0
 80008f2:	2303      	movs	r3, #3
 80008f4:	2200      	movs	r2, #0
 80008f6:	2105      	movs	r1, #5
 80008f8:	9102      	str	r1, [sp, #8]
 80008fa:	9201      	str	r2, [sp, #4]
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	4623      	mov	r3, r4
 8000900:	4602      	mov	r2, r0
 8000902:	2103      	movs	r1, #3
 8000904:	4897      	ldr	r0, [pc, #604]	; (8000b64 <SPI_Pin+0x4ac>)
 8000906:	f7ff fdd9 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	799b      	ldrb	r3, [r3, #6]
 800090e:	b29b      	uxth	r3, r3
 8000910:	2210      	movs	r2, #16
 8000912:	4293      	cmp	r3, r2
 8000914:	d10d      	bne.n	8000932 <SPI_Pin+0x27a>
 8000916:	2002      	movs	r0, #2
 8000918:	2400      	movs	r4, #0
 800091a:	2303      	movs	r3, #3
 800091c:	2200      	movs	r2, #0
 800091e:	2105      	movs	r1, #5
 8000920:	9102      	str	r1, [sp, #8]
 8000922:	9201      	str	r2, [sp, #4]
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	4623      	mov	r3, r4
 8000928:	4602      	mov	r2, r0
 800092a:	2106      	movs	r1, #6
 800092c:	488c      	ldr	r0, [pc, #560]	; (8000b60 <SPI_Pin+0x4a8>)
 800092e:	f7ff fdc5 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	799b      	ldrb	r3, [r3, #6]
 8000936:	b29b      	uxth	r3, r3
 8000938:	2218      	movs	r2, #24
 800093a:	4293      	cmp	r3, r2
 800093c:	d10d      	bne.n	800095a <SPI_Pin+0x2a2>
 800093e:	2002      	movs	r0, #2
 8000940:	2400      	movs	r4, #0
 8000942:	2303      	movs	r3, #3
 8000944:	2200      	movs	r2, #0
 8000946:	2105      	movs	r1, #5
 8000948:	9102      	str	r1, [sp, #8]
 800094a:	9201      	str	r2, [sp, #4]
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4623      	mov	r3, r4
 8000950:	4602      	mov	r2, r0
 8000952:	2104      	movs	r1, #4
 8000954:	4883      	ldr	r0, [pc, #524]	; (8000b64 <SPI_Pin+0x4ac>)
 8000956:	f7ff fdb1 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000968:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	e2c1      	b.n	8000f00 <SPI_Pin+0x848>
	else if(config -> Port == SPI2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a79      	ldr	r2, [pc, #484]	; (8000b68 <SPI_Pin+0x4b0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	f040 815a 	bne.w	8000c3c <SPI_Pin+0x584>
		if(config->mode == 0)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	89db      	ldrh	r3, [r3, #14]
 800098c:	2b00      	cmp	r3, #0
 800098e:	f040 8081 	bne.w	8000a94 <SPI_Pin+0x3dc>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	b29b      	uxth	r3, r3
 8000998:	22d2      	movs	r2, #210	; 0xd2
 800099a:	4293      	cmp	r3, r2
 800099c:	d10d      	bne.n	80009ba <SPI_Pin+0x302>
 800099e:	2002      	movs	r0, #2
 80009a0:	2400      	movs	r4, #0
 80009a2:	2303      	movs	r3, #3
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	9102      	str	r1, [sp, #8]
 80009aa:	9201      	str	r2, [sp, #4]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	4623      	mov	r3, r4
 80009b0:	4602      	mov	r2, r0
 80009b2:	210a      	movs	r1, #10
 80009b4:	486b      	ldr	r0, [pc, #428]	; (8000b64 <SPI_Pin+0x4ac>)
 80009b6:	f7ff fd81 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	22d5      	movs	r2, #213	; 0xd5
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d10d      	bne.n	80009e2 <SPI_Pin+0x32a>
 80009c6:	2002      	movs	r0, #2
 80009c8:	2400      	movs	r4, #0
 80009ca:	2303      	movs	r3, #3
 80009cc:	2200      	movs	r2, #0
 80009ce:	2105      	movs	r1, #5
 80009d0:	9102      	str	r1, [sp, #8]
 80009d2:	9201      	str	r2, [sp, #4]
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	4623      	mov	r3, r4
 80009d8:	4602      	mov	r2, r0
 80009da:	210d      	movs	r1, #13
 80009dc:	4861      	ldr	r0, [pc, #388]	; (8000b64 <SPI_Pin+0x4ac>)
 80009de:	f7ff fd6d 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	799b      	ldrb	r3, [r3, #6]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	22d6      	movs	r2, #214	; 0xd6
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <SPI_Pin+0x352>
 80009ee:	2002      	movs	r0, #2
 80009f0:	2400      	movs	r4, #0
 80009f2:	2303      	movs	r3, #3
 80009f4:	2200      	movs	r2, #0
 80009f6:	2105      	movs	r1, #5
 80009f8:	9102      	str	r1, [sp, #8]
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4623      	mov	r3, r4
 8000a00:	4602      	mov	r2, r0
 8000a02:	210e      	movs	r1, #14
 8000a04:	4857      	ldr	r0, [pc, #348]	; (8000b64 <SPI_Pin+0x4ac>)
 8000a06:	f7ff fd59 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	799b      	ldrb	r3, [r3, #6]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	2220      	movs	r2, #32
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10d      	bne.n	8000a32 <SPI_Pin+0x37a>
 8000a16:	2002      	movs	r0, #2
 8000a18:	2400      	movs	r4, #0
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2105      	movs	r1, #5
 8000a20:	9102      	str	r1, [sp, #8]
 8000a22:	9201      	str	r2, [sp, #4]
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	4623      	mov	r3, r4
 8000a28:	4602      	mov	r2, r0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	484f      	ldr	r0, [pc, #316]	; (8000b6c <SPI_Pin+0x4b4>)
 8000a2e:	f7ff fd45 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PB15) GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	795b      	ldrb	r3, [r3, #5]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	22d7      	movs	r2, #215	; 0xd7
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10d      	bne.n	8000a5a <SPI_Pin+0x3a2>
 8000a3e:	2002      	movs	r0, #2
 8000a40:	2400      	movs	r4, #0
 8000a42:	2303      	movs	r3, #3
 8000a44:	2200      	movs	r2, #0
 8000a46:	2105      	movs	r1, #5
 8000a48:	9102      	str	r1, [sp, #8]
 8000a4a:	9201      	str	r2, [sp, #4]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	4623      	mov	r3, r4
 8000a50:	4602      	mov	r2, r0
 8000a52:	210f      	movs	r1, #15
 8000a54:	4843      	ldr	r0, [pc, #268]	; (8000b64 <SPI_Pin+0x4ac>)
 8000a56:	f7ff fd31 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PC3) GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	795b      	ldrb	r3, [r3, #5]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	2221      	movs	r2, #33	; 0x21
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10d      	bne.n	8000a82 <SPI_Pin+0x3ca>
 8000a66:	2002      	movs	r0, #2
 8000a68:	2400      	movs	r4, #0
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2105      	movs	r1, #5
 8000a70:	9102      	str	r1, [sp, #8]
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4623      	mov	r3, r4
 8000a78:	4602      	mov	r2, r0
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	483b      	ldr	r0, [pc, #236]	; (8000b6c <SPI_Pin+0x4b4>)
 8000a7e:	f7ff fd1d 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	e235      	b.n	8000f00 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	89db      	ldrh	r3, [r3, #14]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d169      	bne.n	8000b70 <SPI_Pin+0x4b8>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	22d2      	movs	r2, #210	; 0xd2
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d10d      	bne.n	8000ac4 <SPI_Pin+0x40c>
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	2400      	movs	r4, #0
 8000aac:	2303      	movs	r3, #3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2105      	movs	r1, #5
 8000ab2:	9102      	str	r1, [sp, #8]
 8000ab4:	9201      	str	r2, [sp, #4]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4623      	mov	r3, r4
 8000aba:	4602      	mov	r2, r0
 8000abc:	210a      	movs	r1, #10
 8000abe:	4829      	ldr	r0, [pc, #164]	; (8000b64 <SPI_Pin+0x4ac>)
 8000ac0:	f7ff fcfc 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	22d5      	movs	r2, #213	; 0xd5
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d10d      	bne.n	8000aec <SPI_Pin+0x434>
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	9102      	str	r1, [sp, #8]
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	210d      	movs	r1, #13
 8000ae6:	481f      	ldr	r0, [pc, #124]	; (8000b64 <SPI_Pin+0x4ac>)
 8000ae8:	f7ff fce8 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	22d2      	movs	r2, #210	; 0xd2
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d10d      	bne.n	8000b14 <SPI_Pin+0x45c>
 8000af8:	2002      	movs	r0, #2
 8000afa:	2400      	movs	r4, #0
 8000afc:	2303      	movs	r3, #3
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	9102      	str	r1, [sp, #8]
 8000b04:	9201      	str	r2, [sp, #4]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	4623      	mov	r3, r4
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	4815      	ldr	r0, [pc, #84]	; (8000b64 <SPI_Pin+0x4ac>)
 8000b10:	f7ff fcd4 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	22d5      	movs	r2, #213	; 0xd5
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d10d      	bne.n	8000b3c <SPI_Pin+0x484>
 8000b20:	2002      	movs	r0, #2
 8000b22:	2400      	movs	r4, #0
 8000b24:	2303      	movs	r3, #3
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	9102      	str	r1, [sp, #8]
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4623      	mov	r3, r4
 8000b32:	4602      	mov	r2, r0
 8000b34:	210d      	movs	r1, #13
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <SPI_Pin+0x4ac>)
 8000b38:	f7ff fcc0 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b4a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	e1d0      	b.n	8000f00 <SPI_Pin+0x848>
 8000b5e:	bf00      	nop
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40020800 	.word	0x40020800
		else if(config->mode == 2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	89db      	ldrh	r3, [r3, #14]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	f040 81c3 	bne.w	8000f00 <SPI_Pin+0x848>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	22d2      	movs	r2, #210	; 0xd2
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10d      	bne.n	8000ba2 <SPI_Pin+0x4ea>
 8000b86:	2002      	movs	r0, #2
 8000b88:	2400      	movs	r4, #0
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2105      	movs	r1, #5
 8000b90:	9102      	str	r1, [sp, #8]
 8000b92:	9201      	str	r2, [sp, #4]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	4623      	mov	r3, r4
 8000b98:	4602      	mov	r2, r0
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	48a2      	ldr	r0, [pc, #648]	; (8000e28 <SPI_Pin+0x770>)
 8000b9e:	f7ff fc8d 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	22d5      	movs	r2, #213	; 0xd5
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d10d      	bne.n	8000bca <SPI_Pin+0x512>
 8000bae:	2002      	movs	r0, #2
 8000bb0:	2400      	movs	r4, #0
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	9102      	str	r1, [sp, #8]
 8000bba:	9201      	str	r2, [sp, #4]
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	210d      	movs	r1, #13
 8000bc4:	4898      	ldr	r0, [pc, #608]	; (8000e28 <SPI_Pin+0x770>)
 8000bc6:	f7ff fc79 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	799b      	ldrb	r3, [r3, #6]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	22d6      	movs	r2, #214	; 0xd6
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10d      	bne.n	8000bf2 <SPI_Pin+0x53a>
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	2400      	movs	r4, #0
 8000bda:	2303      	movs	r3, #3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2105      	movs	r1, #5
 8000be0:	9102      	str	r1, [sp, #8]
 8000be2:	9201      	str	r2, [sp, #4]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	4623      	mov	r3, r4
 8000be8:	4602      	mov	r2, r0
 8000bea:	210e      	movs	r1, #14
 8000bec:	488e      	ldr	r0, [pc, #568]	; (8000e28 <SPI_Pin+0x770>)
 8000bee:	f7ff fc65 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d10d      	bne.n	8000c1a <SPI_Pin+0x562>
 8000bfe:	2002      	movs	r0, #2
 8000c00:	2400      	movs	r4, #0
 8000c02:	2303      	movs	r3, #3
 8000c04:	2200      	movs	r2, #0
 8000c06:	2105      	movs	r1, #5
 8000c08:	9102      	str	r1, [sp, #8]
 8000c0a:	9201      	str	r2, [sp, #4]
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4623      	mov	r3, r4
 8000c10:	4602      	mov	r2, r0
 8000c12:	2102      	movs	r1, #2
 8000c14:	4885      	ldr	r0, [pc, #532]	; (8000e2c <SPI_Pin+0x774>)
 8000c16:	f7ff fc51 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c28:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	e161      	b.n	8000f00 <SPI_Pin+0x848>
	else if(config -> Port == SPI3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a7b      	ldr	r2, [pc, #492]	; (8000e30 <SPI_Pin+0x778>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	f040 815c 	bne.w	8000f00 <SPI_Pin+0x848>
		if(config->mode == 0)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	89db      	ldrh	r3, [r3, #14]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 8084 	bne.w	8000d5a <SPI_Pin+0x6a2>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	2217      	movs	r2, #23
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10d      	bne.n	8000c7a <SPI_Pin+0x5c2>
 8000c5e:	2002      	movs	r0, #2
 8000c60:	2400      	movs	r4, #0
 8000c62:	2303      	movs	r3, #3
 8000c64:	2200      	movs	r2, #0
 8000c66:	2106      	movs	r1, #6
 8000c68:	9102      	str	r1, [sp, #8]
 8000c6a:	9201      	str	r2, [sp, #4]
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4623      	mov	r3, r4
 8000c70:	4602      	mov	r2, r0
 8000c72:	2103      	movs	r1, #3
 8000c74:	486c      	ldr	r0, [pc, #432]	; (8000e28 <SPI_Pin+0x770>)
 8000c76:	f7ff fc21 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	791b      	ldrb	r3, [r3, #4]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d10d      	bne.n	8000ca4 <SPI_Pin+0x5ec>
 8000c88:	2002      	movs	r0, #2
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2106      	movs	r1, #6
 8000c92:	9102      	str	r1, [sp, #8]
 8000c94:	9201      	str	r2, [sp, #4]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	4623      	mov	r3, r4
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	210a      	movs	r1, #10
 8000c9e:	4863      	ldr	r0, [pc, #396]	; (8000e2c <SPI_Pin+0x774>)
 8000ca0:	f7ff fc0c 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	799b      	ldrb	r3, [r3, #6]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	2218      	movs	r2, #24
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d10d      	bne.n	8000ccc <SPI_Pin+0x614>
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2106      	movs	r1, #6
 8000cba:	9102      	str	r1, [sp, #8]
 8000cbc:	9201      	str	r2, [sp, #4]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4858      	ldr	r0, [pc, #352]	; (8000e28 <SPI_Pin+0x770>)
 8000cc8:	f7ff fbf8 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	799b      	ldrb	r3, [r3, #6]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f240 1237 	movw	r2, #311	; 0x137
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <SPI_Pin+0x63e>
 8000cda:	2002      	movs	r0, #2
 8000cdc:	2400      	movs	r4, #0
 8000cde:	2303      	movs	r3, #3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2106      	movs	r1, #6
 8000ce4:	9102      	str	r1, [sp, #8]
 8000ce6:	9201      	str	r2, [sp, #4]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4623      	mov	r3, r4
 8000cec:	4602      	mov	r2, r0
 8000cee:	210b      	movs	r1, #11
 8000cf0:	484e      	ldr	r0, [pc, #312]	; (8000e2c <SPI_Pin+0x774>)
 8000cf2:	f7ff fbe3 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	795b      	ldrb	r3, [r3, #5]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2219      	movs	r2, #25
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <SPI_Pin+0x666>
 8000d02:	2002      	movs	r0, #2
 8000d04:	2400      	movs	r4, #0
 8000d06:	2303      	movs	r3, #3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	9102      	str	r1, [sp, #8]
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4623      	mov	r3, r4
 8000d14:	4602      	mov	r2, r0
 8000d16:	2105      	movs	r1, #5
 8000d18:	4843      	ldr	r0, [pc, #268]	; (8000e28 <SPI_Pin+0x770>)
 8000d1a:	f7ff fbcf 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	795b      	ldrb	r3, [r3, #5]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d10d      	bne.n	8000d48 <SPI_Pin+0x690>
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	2400      	movs	r4, #0
 8000d30:	2303      	movs	r3, #3
 8000d32:	2200      	movs	r2, #0
 8000d34:	2106      	movs	r1, #6
 8000d36:	9102      	str	r1, [sp, #8]
 8000d38:	9201      	str	r2, [sp, #4]
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4623      	mov	r3, r4
 8000d3e:	4602      	mov	r2, r0
 8000d40:	210c      	movs	r1, #12
 8000d42:	483a      	ldr	r0, [pc, #232]	; (8000e2c <SPI_Pin+0x774>)
 8000d44:	f7ff fbba 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	e0d2      	b.n	8000f00 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	89db      	ldrh	r3, [r3, #14]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d168      	bne.n	8000e34 <SPI_Pin+0x77c>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2217      	movs	r2, #23
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10d      	bne.n	8000d8a <SPI_Pin+0x6d2>
 8000d6e:	2002      	movs	r0, #2
 8000d70:	2400      	movs	r4, #0
 8000d72:	2303      	movs	r3, #3
 8000d74:	2200      	movs	r2, #0
 8000d76:	2106      	movs	r1, #6
 8000d78:	9102      	str	r1, [sp, #8]
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	4623      	mov	r3, r4
 8000d80:	4602      	mov	r2, r0
 8000d82:	2103      	movs	r1, #3
 8000d84:	4828      	ldr	r0, [pc, #160]	; (8000e28 <SPI_Pin+0x770>)
 8000d86:	f7ff fb99 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d10d      	bne.n	8000db4 <SPI_Pin+0x6fc>
 8000d98:	2002      	movs	r0, #2
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2106      	movs	r1, #6
 8000da2:	9102      	str	r1, [sp, #8]
 8000da4:	9201      	str	r2, [sp, #4]
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	4623      	mov	r3, r4
 8000daa:	4602      	mov	r2, r0
 8000dac:	210a      	movs	r1, #10
 8000dae:	481f      	ldr	r0, [pc, #124]	; (8000e2c <SPI_Pin+0x774>)
 8000db0:	f7ff fb84 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2218      	movs	r2, #24
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d10d      	bne.n	8000ddc <SPI_Pin+0x724>
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2106      	movs	r1, #6
 8000dca:	9102      	str	r1, [sp, #8]
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4623      	mov	r3, r4
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <SPI_Pin+0x770>)
 8000dd8:	f7ff fb70 	bl	80004bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	799b      	ldrb	r3, [r3, #6]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f240 1237 	movw	r2, #311	; 0x137
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10d      	bne.n	8000e06 <SPI_Pin+0x74e>
 8000dea:	2002      	movs	r0, #2
 8000dec:	2400      	movs	r4, #0
 8000dee:	2303      	movs	r3, #3
 8000df0:	2200      	movs	r2, #0
 8000df2:	2106      	movs	r1, #6
 8000df4:	9102      	str	r1, [sp, #8]
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	210b      	movs	r1, #11
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <SPI_Pin+0x774>)
 8000e02:	f7ff fb5b 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e14:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e24:	601a      	str	r2, [r3, #0]
}
 8000e26:	e06b      	b.n	8000f00 <SPI_Pin+0x848>
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40003c00 	.word	0x40003c00
		else if(config->mode == 2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	89db      	ldrh	r3, [r3, #14]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d161      	bne.n	8000f00 <SPI_Pin+0x848>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	2217      	movs	r2, #23
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d10d      	bne.n	8000e64 <SPI_Pin+0x7ac>
 8000e48:	2002      	movs	r0, #2
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2106      	movs	r1, #6
 8000e52:	9102      	str	r1, [sp, #8]
 8000e54:	9201      	str	r2, [sp, #4]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4623      	mov	r3, r4
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	482a      	ldr	r0, [pc, #168]	; (8000f08 <SPI_Pin+0x850>)
 8000e60:	f7ff fb2c 	bl	80004bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	791b      	ldrb	r3, [r3, #4]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <SPI_Pin+0x7d6>
 8000e72:	2002      	movs	r0, #2
 8000e74:	2400      	movs	r4, #0
 8000e76:	2303      	movs	r3, #3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2106      	movs	r1, #6
 8000e7c:	9102      	str	r1, [sp, #8]
 8000e7e:	9201      	str	r2, [sp, #4]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	4623      	mov	r3, r4
 8000e84:	4602      	mov	r2, r0
 8000e86:	210a      	movs	r1, #10
 8000e88:	4820      	ldr	r0, [pc, #128]	; (8000f0c <SPI_Pin+0x854>)
 8000e8a:	f7ff fb17 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	2219      	movs	r2, #25
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10d      	bne.n	8000eb6 <SPI_Pin+0x7fe>
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2106      	movs	r1, #6
 8000ea4:	9102      	str	r1, [sp, #8]
 8000ea6:	9201      	str	r2, [sp, #4]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4602      	mov	r2, r0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	4815      	ldr	r0, [pc, #84]	; (8000f08 <SPI_Pin+0x850>)
 8000eb2:	f7ff fb03 	bl	80004bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d10d      	bne.n	8000ee0 <SPI_Pin+0x828>
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	2400      	movs	r4, #0
 8000ec8:	2303      	movs	r3, #3
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2106      	movs	r1, #6
 8000ece:	9102      	str	r1, [sp, #8]
 8000ed0:	9201      	str	r2, [sp, #4]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	210c      	movs	r1, #12
 8000eda:	480c      	ldr	r0, [pc, #48]	; (8000f0c <SPI_Pin+0x854>)
 8000edc:	f7ff faee 	bl	80004bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eee:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020800 	.word	0x40020800

08000f10 <SPI_Init>:


void SPI_Init(SPI_Config *config)
{
 8000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Type.Master){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	8b1b      	ldrh	r3, [r3, #24]
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10f      	bne.n	8000f42 <SPI_Init+0x32>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6898      	ldr	r0, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7b19      	ldrb	r1, [r3, #12]
 8000f2a:	2501      	movs	r5, #1
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	2303      	movs	r3, #3
 8000f30:	2201      	movs	r2, #1
 8000f32:	2400      	movs	r4, #0
 8000f34:	9402      	str	r4, [sp, #8]
 8000f36:	9201      	str	r2, [sp, #4]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4633      	mov	r3, r6
 8000f3c:	462a      	mov	r2, r5
 8000f3e:	f7ff fabd 	bl	80004bc <GPIO_Pin_Init>
	}
	if(config->type == SPI_Type.Slave){
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	8b1b      	ldrh	r3, [r3, #24]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d10f      	bne.n	8000f6c <SPI_Init+0x5c>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.Input, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b19      	ldrb	r1, [r3, #12]
 8000f54:	2500      	movs	r5, #0
 8000f56:	2600      	movs	r6, #0
 8000f58:	2303      	movs	r3, #3
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2400      	movs	r4, #0
 8000f5e:	9402      	str	r4, [sp, #8]
 8000f60:	9201      	str	r2, [sp, #4]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4633      	mov	r3, r6
 8000f66:	462a      	mov	r2, r5
 8000f68:	f7ff faa8 	bl	80004bc <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff fb05 	bl	800057c <SPI_Clock_Enable>
	SPI_Pin(config);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fba0 	bl	80006b8 <SPI_Pin>

	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	8b99      	ldrh	r1, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8b5b      	ldrh	r3, [r3, #26]
					config->type | config->frame_format |
					config->data_format | config->crc ;
 8000f86:	430b      	orrs	r3, r1
 8000f88:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	8b1b      	ldrh	r3, [r3, #24]
					config->data_format | config->crc ;
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	8a9b      	ldrh	r3, [r3, #20]
					config->data_format | config->crc ;
 8000f96:	430b      	orrs	r3, r1
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	8a5b      	ldrh	r3, [r3, #18]
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	8a1b      	ldrh	r3, [r3, #16]
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4619      	mov	r1, r3
	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
	config->Port->CR2 |= config->dma | config->interrupt;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	8c19      	ldrh	r1, [r3, #32]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	8bdb      	ldrh	r3, [r3, #30]
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	605a      	str	r2, [r3, #4]

//	if(config->Port == SPI1)config->speed = (SystemCoreClock/2)/(2*2^(config->prescaler));
//	else config->speed = (SystemCoreClock/4)/(2*2^(config->prescaler));

	config -> Port -> CR1 |= config->prescaler << SPI_CR1_BR_Pos;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	8adb      	ldrh	r3, [r3, #22]
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 &= ~SPI_CR1_SSM ;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ff4:	601a      	str	r2, [r3, #0]
	config->Port -> CR2 |=  SPI_CR2_SSOE ;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0204 	orr.w	r2, r2, #4
 8001004:	605a      	str	r2, [r3, #4]
//			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
//			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
//			DMA_Init(&xDMA_TX);
//		}
//	}
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800100e <SPI_Enable>:

void SPI_Enable(SPI_Config *config)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <SPI_TRX_Byte>:
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
}


uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8001042:	bf00      	nop
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f8      	beq.n	8001044 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 800105a:	bf00      	nop
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f8      	beq.n	800105c <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	b29b      	uxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8001074:	bf00      	nop
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8001084:	bf00      	nop
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f8      	bne.n	8001086 <SPI_TRX_Byte+0x54>
	return temp;
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	b29b      	uxth	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SPI_NSS_High>:
//	}
//
//}

void SPI_NSS_High(SPI_Config *config)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7b1b      	ldrb	r3, [r3, #12]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f7ff f97a 	bl	80003b0 <GPIO_Pin_High>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <SPI_NSS_Low>:

void SPI_NSS_Low(SPI_Config *config)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7b1b      	ldrb	r3, [r3, #12]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f7ff f97c 	bl	80003d4 <GPIO_Pin_Low>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ffc2 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001182:	2304      	movs	r3, #4
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8001186:	23a8      	movs	r3, #168	; 0xa8
 8001188:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 800118e:	2307      	movs	r3, #7
 8001190:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <MCU_Clock_Setup+0x10c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a3a      	ldr	r2, [pc, #232]	; (8001288 <MCU_Clock_Setup+0x10c>)
 800119e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80011a4:	bf00      	nop
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <MCU_Clock_Setup+0x10c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f9      	beq.n	80011a6 <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <MCU_Clock_Setup+0x10c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <MCU_Clock_Setup+0x10c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <MCU_Clock_Setup+0x110>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a32      	ldr	r2, [pc, #200]	; (800128c <MCU_Clock_Setup+0x110>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <MCU_Clock_Setup+0x114>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <MCU_Clock_Setup+0x114>)
 80011d0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011d4:	f043 0305 	orr.w	r3, r3, #5
 80011d8:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MCU_Clock_Setup+0x10c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	793a      	ldrb	r2, [r7, #4]
 80011e0:	0611      	lsls	r1, r2, #24
 80011e2:	797a      	ldrb	r2, [r7, #5]
 80011e4:	0412      	lsls	r2, r2, #16
 80011e6:	4311      	orrs	r1, r2
 80011e8:	79ba      	ldrb	r2, [r7, #6]
 80011ea:	0192      	lsls	r2, r2, #6
 80011ec:	4311      	orrs	r1, r2
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	4611      	mov	r1, r2
 80011f4:	4a24      	ldr	r2, [pc, #144]	; (8001288 <MCU_Clock_Setup+0x10c>)
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MCU_Clock_Setup+0x10c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001204:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <MCU_Clock_Setup+0x10c>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001214:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001218:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MCU_Clock_Setup+0x10c>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001224:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MCU_Clock_Setup+0x10c>)
 800122c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001230:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001232:	bf00      	nop
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f9      	beq.n	8001234 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800124c:	bf00      	nop
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b08      	cmp	r3, #8
 8001258:	d1f9      	bne.n	800124e <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 800125a:	f000 f9d1 	bl	8001600 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MCU_Clock_Setup+0x118>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <MCU_Clock_Setup+0x11c>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	085b      	lsrs	r3, r3, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff63 	bl	8001138 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <MCU_Clock_Setup+0x10c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000
 8001290:	40023c00 	.word	0x40023c00
 8001294:	20000000 	.word	0x20000000
 8001298:	18618619 	.word	0x18618619

0800129c <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <Delay_Config+0x2c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <Delay_Config+0x2c>)
 80012a8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80012ac:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <Delay_Config+0x2c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <Delay_Config+0x2c>)
 80012b6:	2205      	movs	r2, #5
 80012b8:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80012d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012da:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001320 <Delay_ms+0x54>
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	ee17 3a90 	vmov	r3, s15
 80012ea:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <Delay_ms+0x58>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <Delay_ms+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <Delay_ms+0x58>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <Delay_ms+0x58>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001304:	bf00      	nop
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <Delay_ms+0x58>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f9      	beq.n	8001306 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	48241000 	.word	0x48241000
 8001324:	e000e010 	.word	0xe000e010

08001328 <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 800133c:	e006      	b.n	800134c <Delay_s+0x24>
	{
		Delay_ms(1);
 800133e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001342:	f7ff ffc3 	bl	80012cc <Delay_ms>
	for (; s>0; s--)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3b01      	subs	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f5      	bne.n	800133e <Delay_s+0x16>
	}
	return (0UL);
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <main>:




int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0c2      	sub	sp, #264	; 0x108
 8001360:	af02      	add	r7, sp, #8
	MCU_Clock_Setup();
 8001362:	f7ff ff0b 	bl	800117c <MCU_Clock_Setup>
	Delay_Config();
 8001366:	f7ff ff99 	bl	800129c <Delay_Config>
	Console_Init(USART1, 9600);
 800136a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800136e:	4877      	ldr	r0, [pc, #476]	; (800154c <main+0x1f0>)
 8001370:	f7fe ff96 	bl	80002a0 <Console_Init>




	SPI_Config_Reset(&xW5500.SPI);
 8001374:	4876      	ldr	r0, [pc, #472]	; (8001550 <main+0x1f4>)
 8001376:	f7ff f93b 	bl	80005f0 <SPI_Config_Reset>
	xW5500.SPI.Port = SPI1;
 800137a:	4b75      	ldr	r3, [pc, #468]	; (8001550 <main+0x1f4>)
 800137c:	4a75      	ldr	r2, [pc, #468]	; (8001554 <main+0x1f8>)
 800137e:	601a      	str	r2, [r3, #0]
	xW5500.SPI.miso_pin = SPI1_MISO.PA6;
 8001380:	2310      	movs	r3, #16
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b72      	ldr	r3, [pc, #456]	; (8001550 <main+0x1f4>)
 8001386:	719a      	strb	r2, [r3, #6]
	xW5500.SPI.mosi_pin = SPI1_MOSI.PA7;
 8001388:	2311      	movs	r3, #17
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <main+0x1f4>)
 800138e:	715a      	strb	r2, [r3, #5]
	xW5500.SPI.clock_pin = SPI1_CLK.PA5;
 8001390:	230f      	movs	r3, #15
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <main+0x1f4>)
 8001396:	711a      	strb	r2, [r3, #4]
	xW5500.SPI.prescaler = SPI_Prescaler.CLK_div_16;
 8001398:	2203      	movs	r2, #3
 800139a:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <main+0x1f4>)
 800139c:	82da      	strh	r2, [r3, #22]



	uint8_t Subnet_Mask_Address[] = {255,255,0,0};
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	uint8_t Gateway_address[] = {0xFF,0xFF,0xFF,0xFF};
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t Source_Hardware_Address[] = {0x11,0x22,0x33,0x44,0x55,0x66};
 80013ae:	4a6a      	ldr	r2, [pc, #424]	; (8001558 <main+0x1fc>)
 80013b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b8:	6018      	str	r0, [r3, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	8019      	strh	r1, [r3, #0]
	uint8_t Source_IP_Address[] = {169,254,26,102}; //169.254.26.103
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <main+0x200>)
 80013c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	xW5500.Gateway_Address = Gateway_address;
 80013c4:	4a62      	ldr	r2, [pc, #392]	; (8001550 <main+0x1f4>)
 80013c6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013ca:	6293      	str	r3, [r2, #40]	; 0x28
	xW5500.Source_Hardware_Address = Source_Hardware_Address;
 80013cc:	4a60      	ldr	r2, [pc, #384]	; (8001550 <main+0x1f4>)
 80013ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
	xW5500.Source_IP_Address = Source_IP_Address;
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <main+0x1f4>)
 80013d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013da:	6393      	str	r3, [r2, #56]	; 0x38
	xW5500.Subnet_Mask_Address = Subnet_Mask_Address;
 80013dc:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <main+0x1f4>)
 80013de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013e2:	62d3      	str	r3, [r2, #44]	; 0x2c
	xW5500.Source_Port = 48567;
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <main+0x1f4>)
 80013e6:	f64b 52b7 	movw	r2, #48567	; 0xbdb7
 80013ea:	869a      	strh	r2, [r3, #52]	; 0x34

	W5500_Init(&xW5500);
 80013ec:	4858      	ldr	r0, [pc, #352]	; (8001550 <main+0x1f4>)
 80013ee:	f000 ff6f 	bl	80022d0 <W5500_Init>

	xW5500_Socket0.Hardware_Socket_Number = W5500_Hardware_Socket.Socket_1;
 80013f2:	2201      	movs	r2, #1
 80013f4:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <main+0x204>)
 80013f6:	701a      	strb	r2, [r3, #0]
	xW5500_Socket0.Mode = W5500_Socket_Mode.UDP;
 80013f8:	2202      	movs	r2, #2
 80013fa:	4b59      	ldr	r3, [pc, #356]	; (8001560 <main+0x204>)
 80013fc:	709a      	strb	r2, [r3, #2]
	xW5500_Socket0.Destination_Port = 48569; //48569
 80013fe:	4b58      	ldr	r3, [pc, #352]	; (8001560 <main+0x204>)
 8001400:	f64b 52b9 	movw	r2, #48569	; 0xbdb9
 8001404:	819a      	strh	r2, [r3, #12]

	uint8_t Destination_Hardware_Address[] = { 0x00,0xe0,0x4c,0x68,0x9e,0x2c};
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <main+0x208>)
 8001408:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800140c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001410:	6018      	str	r0, [r3, #0]
 8001412:	3304      	adds	r3, #4
 8001414:	8019      	strh	r1, [r3, #0]
	uint8_t Destination_IP_Address[] = {169,254,149,36}; //169.254.26.103
 8001416:	4b54      	ldr	r3, [pc, #336]	; (8001568 <main+0x20c>)
 8001418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	xW5500_Socket0.Destination_Hardware_Address = Destination_Hardware_Address;
 800141c:	4a50      	ldr	r2, [pc, #320]	; (8001560 <main+0x204>)
 800141e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001422:	6053      	str	r3, [r2, #4]
	xW5500_Socket0.Destination_IP_Address = Destination_IP_Address;
 8001424:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <main+0x204>)
 8001426:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800142a:	6093      	str	r3, [r2, #8]
	uint8_t Payload[200];




	int i = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	while(i < 10000)
 8001432:	e07e      	b.n	8001532 <main+0x1d6>
	{
		uint8_t data[] = {'K','u','n','a','l',' ', 'S', 'a', 'l', 'v', 'i',i};
 8001434:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001438:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143c:	224b      	movs	r2, #75	; 0x4b
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001444:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001448:	2275      	movs	r2, #117	; 0x75
 800144a:	705a      	strb	r2, [r3, #1]
 800144c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001450:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001454:	226e      	movs	r2, #110	; 0x6e
 8001456:	709a      	strb	r2, [r3, #2]
 8001458:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800145c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001460:	2261      	movs	r2, #97	; 0x61
 8001462:	70da      	strb	r2, [r3, #3]
 8001464:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001468:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800146c:	226c      	movs	r2, #108	; 0x6c
 800146e:	711a      	strb	r2, [r3, #4]
 8001470:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001474:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001478:	2220      	movs	r2, #32
 800147a:	715a      	strb	r2, [r3, #5]
 800147c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001480:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001484:	2253      	movs	r2, #83	; 0x53
 8001486:	719a      	strb	r2, [r3, #6]
 8001488:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800148c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001490:	2261      	movs	r2, #97	; 0x61
 8001492:	71da      	strb	r2, [r3, #7]
 8001494:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001498:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800149c:	226c      	movs	r2, #108	; 0x6c
 800149e:	721a      	strb	r2, [r3, #8]
 80014a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014a8:	2276      	movs	r2, #118	; 0x76
 80014aa:	725a      	strb	r2, [r3, #9]
 80014ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014b4:	2269      	movs	r2, #105	; 0x69
 80014b6:	729a      	strb	r2, [r3, #10]
 80014b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014c6:	72da      	strb	r2, [r3, #11]
		xW5500_Socket0.data = &data[0];
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <main+0x204>)
 80014ca:	463b      	mov	r3, r7
 80014cc:	6113      	str	r3, [r2, #16]
		xW5500_Socket0.data_len = 12;
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <main+0x204>)
 80014d0:	220c      	movs	r2, #12
 80014d2:	829a      	strh	r2, [r3, #20]
		W5500_UDP_Socket_Open(&xW5500, &xW5500_Socket0);
 80014d4:	4922      	ldr	r1, [pc, #136]	; (8001560 <main+0x204>)
 80014d6:	481e      	ldr	r0, [pc, #120]	; (8001550 <main+0x1f4>)
 80014d8:	f001 f9ac 	bl	8002834 <W5500_UDP_Socket_Open>
		W5500_UDP_Socket_Send_Packet(&xW5500, &xW5500_Socket0);
 80014dc:	4920      	ldr	r1, [pc, #128]	; (8001560 <main+0x204>)
 80014de:	481c      	ldr	r0, [pc, #112]	; (8001550 <main+0x1f4>)
 80014e0:	f001 fa20 	bl	8002924 <W5500_UDP_Socket_Send_Packet>
		W5500_UDP_Socket_Get_Packet(&xW5500, &xW5500_Socket0, &IP, &Port, &Payload, &Payload_Length);
 80014e4:	f107 01d6 	add.w	r1, r7, #214	; 0xd6
 80014e8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80014ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	460b      	mov	r3, r1
 80014fa:	4919      	ldr	r1, [pc, #100]	; (8001560 <main+0x204>)
 80014fc:	4814      	ldr	r0, [pc, #80]	; (8001550 <main+0x1f4>)
 80014fe:	f001 fa95 	bl	8002a2c <W5500_UDP_Socket_Get_Packet>
		W5500_UDP_Socket_Close(&xW5500, &xW5500_Socket0);
 8001502:	4917      	ldr	r1, [pc, #92]	; (8001560 <main+0x204>)
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <main+0x1f4>)
 8001506:	f001 fbed 	bl	8002ce4 <W5500_UDP_Socket_Close>

		printConsole("%d\r\n",Port);
 800150a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800150e:	4619      	mov	r1, r3
 8001510:	4816      	ldr	r0, [pc, #88]	; (800156c <main+0x210>)
 8001512:	f7fe feeb 	bl	80002ec <printConsole>
		printConsole("%d\r\n",Payload_Length);
 8001516:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800151a:	4619      	mov	r1, r3
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <main+0x210>)
 800151e:	f7fe fee5 	bl	80002ec <printConsole>

		Delay_s(5);
 8001522:	2005      	movs	r0, #5
 8001524:	f7ff ff00 	bl	8001328 <Delay_s>
		i++;
 8001528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800152c:	3301      	adds	r3, #1
 800152e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	while(i < 10000)
 8001532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001536:	f242 720f 	movw	r2, #9999	; 0x270f
 800153a:	4293      	cmp	r3, r2
 800153c:	f77f af7a 	ble.w	8001434 <main+0xd8>
 8001540:	2300      	movs	r3, #0
	}


}
 8001542:	4618      	mov	r0, r3
 8001544:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40011000 	.word	0x40011000
 8001550:	20000090 	.word	0x20000090
 8001554:	40013000 	.word	0x40013000
 8001558:	080036c0 	.word	0x080036c0
 800155c:	661afea9 	.word	0x661afea9
 8001560:	200000cc 	.word	0x200000cc
 8001564:	080036c8 	.word	0x080036c8
 8001568:	2495fea9 	.word	0x2495fea9
 800156c:	080036b8 	.word	0x080036b8

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f001 fc02 	bl	8002da8 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200000e4 	.word	0x200000e4
 80015d8:	20000240 	.word	0x20000240

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	2302      	movs	r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	2302      	movs	r3, #2
 8001618:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <SystemCoreClockUpdate+0xec>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b08      	cmp	r3, #8
 8001628:	d011      	beq.n	800164e <SystemCoreClockUpdate+0x4e>
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d844      	bhi.n	80016ba <SystemCoreClockUpdate+0xba>
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <SystemCoreClockUpdate+0x3e>
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d004      	beq.n	8001646 <SystemCoreClockUpdate+0x46>
 800163c:	e03d      	b.n	80016ba <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <SystemCoreClockUpdate+0xf0>)
 8001640:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <SystemCoreClockUpdate+0xf4>)
 8001642:	601a      	str	r2, [r3, #0]
      break;
 8001644:	e03d      	b.n	80016c2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <SystemCoreClockUpdate+0xf0>)
 8001648:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <SystemCoreClockUpdate+0xf8>)
 800164a:	601a      	str	r2, [r3, #0]
      break;
 800164c:	e039      	b.n	80016c2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <SystemCoreClockUpdate+0xec>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	0d9b      	lsrs	r3, r3, #22
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <SystemCoreClockUpdate+0xec>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001662:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <SystemCoreClockUpdate+0xf8>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <SystemCoreClockUpdate+0xec>)
 8001674:	6852      	ldr	r2, [r2, #4]
 8001676:	0992      	lsrs	r2, r2, #6
 8001678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e00b      	b.n	800169c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <SystemCoreClockUpdate+0xf4>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <SystemCoreClockUpdate+0xec>)
 800168e:	6852      	ldr	r2, [r2, #4]
 8001690:	0992      	lsrs	r2, r2, #6
 8001692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <SystemCoreClockUpdate+0xec>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	3301      	adds	r3, #1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <SystemCoreClockUpdate+0xf0>)
 80016b6:	6013      	str	r3, [r2, #0]
      break;
 80016b8:	e003      	b.n	80016c2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <SystemCoreClockUpdate+0xf0>)
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <SystemCoreClockUpdate+0xf4>)
 80016be:	601a      	str	r2, [r3, #0]
      break;
 80016c0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <SystemCoreClockUpdate+0xec>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <SystemCoreClockUpdate+0xfc>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <SystemCoreClockUpdate+0xf0>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <SystemCoreClockUpdate+0xf0>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40023800 	.word	0x40023800
 80016f0:	20000000 	.word	0x20000000
 80016f4:	00f42400 	.word	0x00f42400
 80016f8:	007a1200 	.word	0x007a1200
 80016fc:	080036d0 	.word	0x080036d0

08001700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001702:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001704:	f7ff ff6a 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <LoopForever+0x6>)
  ldr r1, =_edata
 800170a:	490d      	ldr	r1, [pc, #52]	; (8001740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <LoopForever+0xe>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001720:	4c0a      	ldr	r4, [pc, #40]	; (800174c <LoopForever+0x16>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800172e:	f001 fb41 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001732:	f7ff fe13 	bl	800135c <main>

08001736 <LoopForever>:

LoopForever:
  b LoopForever
 8001736:	e7fe      	b.n	8001736 <LoopForever>
  ldr   r0, =_estack
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001744:	0800371c 	.word	0x0800371c
  ldr r2, =_sbss
 8001748:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800174c:	20000240 	.word	0x20000240

08001750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>

08001752 <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 800175a:	2200      	movs	r2, #0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8001760:	2200      	movs	r2, #0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8001766:	2200      	movs	r2, #0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001772:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 8001774:	2203      	movs	r2, #3
 8001776:	2301      	movs	r3, #1
 8001778:	4313      	orrs	r3, r2
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8001780:	2300      	movs	r3, #0
 8001782:	b2da      	uxtb	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	749a      	strb	r2, [r3, #18]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <USART_Clock_Enable+0x12c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d112      	bne.n	80017cc <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d106      	bne.n	80017be <USART_Clock_Enable+0x2a>
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6653      	str	r3, [r2, #100]	; 0x64
 80017bc:	e079      	b.n	80018b2 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a40      	ldr	r2, [pc, #256]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	e072      	b.n	80018b2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <USART_Clock_Enable+0x134>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d112      	bne.n	80017fc <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	4293      	cmp	r3, r2
 80017de:	d106      	bne.n	80017ee <USART_Clock_Enable+0x5a>
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	4a37      	ldr	r2, [pc, #220]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ea:	6613      	str	r3, [r2, #96]	; 0x60
 80017ec:	e061      	b.n	80018b2 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <USART_Clock_Enable+0x130>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	e05a      	b.n	80018b2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a32      	ldr	r2, [pc, #200]	; (80018cc <USART_Clock_Enable+0x138>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d112      	bne.n	800182c <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	4293      	cmp	r3, r2
 800180e:	d106      	bne.n	800181e <USART_Clock_Enable+0x8a>
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181a:	6613      	str	r3, [r2, #96]	; 0x60
 800181c:	e049      	b.n	80018b2 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	e042      	b.n	80018b2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <USART_Clock_Enable+0x13c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10e      	bne.n	8001854 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <USART_Clock_Enable+0xb2>
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	e036      	b.n	80018b4 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <USART_Clock_Enable+0x130>)
 800184c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	e02e      	b.n	80018b2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <USART_Clock_Enable+0x140>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10e      	bne.n	800187c <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	4293      	cmp	r3, r2
 8001866:	d102      	bne.n	800186e <USART_Clock_Enable+0xda>
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	e022      	b.n	80018b4 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	e01a      	b.n	80018b2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <USART_Clock_Enable+0x144>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d112      	bne.n	80018ac <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	4293      	cmp	r3, r2
 800188e:	d106      	bne.n	800189e <USART_Clock_Enable+0x10a>
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <USART_Clock_Enable+0x130>)
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	6653      	str	r3, [r2, #100]	; 0x64
 800189c:	e009      	b.n	80018b2 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <USART_Clock_Enable+0x130>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <USART_Clock_Enable+0x130>)
 80018a4:	f043 0320 	orr.w	r3, r3, #32
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	e002      	b.n	80018b2 <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	e000      	b.n	80018b4 <USART_Clock_Enable+0x120>
	}
	return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40004800 	.word	0x40004800
 80018d0:	40004c00 	.word	0x40004c00
 80018d4:	40005000 	.word	0x40005000
 80018d8:	40011400 	.word	0x40011400

080018dc <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af04      	add	r7, sp, #16
 80018e2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4aa0      	ldr	r2, [pc, #640]	; (8001b6c <PIN_Setup+0x290>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f040 810d 	bne.w	8001b0a <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7b1b      	ldrb	r3, [r3, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00f      	beq.n	800191a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7b1b      	ldrb	r3, [r3, #12]
 80018fe:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8001900:	4293      	cmp	r3, r2
 8001902:	d00a      	beq.n	800191a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7b1b      	ldrb	r3, [r3, #12]
 8001908:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 800190a:	4293      	cmp	r3, r2
 800190c:	d005      	beq.n	800191a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7b1b      	ldrb	r3, [r3, #12]
 8001912:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8001914:	4293      	cmp	r3, r2
 8001916:	f040 80be 	bne.w	8001a96 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7b5b      	ldrb	r3, [r3, #13]
 800191e:	2209      	movs	r2, #9
 8001920:	4293      	cmp	r3, r2
 8001922:	d10f      	bne.n	8001944 <PIN_Setup+0x68>
 8001924:	2009      	movs	r0, #9
 8001926:	2402      	movs	r4, #2
 8001928:	2500      	movs	r5, #0
 800192a:	2302      	movs	r3, #2
 800192c:	2200      	movs	r2, #0
 800192e:	2107      	movs	r1, #7
 8001930:	9102      	str	r1, [sp, #8]
 8001932:	9201      	str	r2, [sp, #4]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	462b      	mov	r3, r5
 8001938:	4622      	mov	r2, r4
 800193a:	4601      	mov	r1, r0
 800193c:	488c      	ldr	r0, [pc, #560]	; (8001b70 <PIN_Setup+0x294>)
 800193e:	f7fe fdbd 	bl	80004bc <GPIO_Pin_Init>
 8001942:	e013      	b.n	800196c <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7b5b      	ldrb	r3, [r3, #13]
 8001948:	2206      	movs	r2, #6
 800194a:	4293      	cmp	r3, r2
 800194c:	d10e      	bne.n	800196c <PIN_Setup+0x90>
 800194e:	2006      	movs	r0, #6
 8001950:	2402      	movs	r4, #2
 8001952:	2500      	movs	r5, #0
 8001954:	2302      	movs	r3, #2
 8001956:	2200      	movs	r2, #0
 8001958:	2107      	movs	r1, #7
 800195a:	9102      	str	r1, [sp, #8]
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	462b      	mov	r3, r5
 8001962:	4622      	mov	r2, r4
 8001964:	4601      	mov	r1, r0
 8001966:	4883      	ldr	r0, [pc, #524]	; (8001b74 <PIN_Setup+0x298>)
 8001968:	f7fe fda8 	bl	80004bc <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10){
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b9b      	ldrb	r3, [r3, #14]
 8001970:	220a      	movs	r2, #10
 8001972:	4293      	cmp	r3, r2
 8001974:	d10f      	bne.n	8001996 <PIN_Setup+0xba>
				GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001976:	200a      	movs	r0, #10
 8001978:	2402      	movs	r4, #2
 800197a:	2500      	movs	r5, #0
 800197c:	2302      	movs	r3, #2
 800197e:	2200      	movs	r2, #0
 8001980:	2107      	movs	r1, #7
 8001982:	9102      	str	r1, [sp, #8]
 8001984:	9201      	str	r2, [sp, #4]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	462b      	mov	r3, r5
 800198a:	4622      	mov	r2, r4
 800198c:	4601      	mov	r1, r0
 800198e:	4878      	ldr	r0, [pc, #480]	; (8001b70 <PIN_Setup+0x294>)
 8001990:	f7fe fd94 	bl	80004bc <GPIO_Pin_Init>
 8001994:	e013      	b.n	80019be <PIN_Setup+0xe2>
			}
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7b9b      	ldrb	r3, [r3, #14]
 800199a:	2207      	movs	r2, #7
 800199c:	4293      	cmp	r3, r2
 800199e:	d10e      	bne.n	80019be <PIN_Setup+0xe2>
 80019a0:	2007      	movs	r0, #7
 80019a2:	2402      	movs	r4, #2
 80019a4:	2500      	movs	r5, #0
 80019a6:	2302      	movs	r3, #2
 80019a8:	2200      	movs	r2, #0
 80019aa:	2107      	movs	r1, #7
 80019ac:	9102      	str	r1, [sp, #8]
 80019ae:	9201      	str	r2, [sp, #4]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	462b      	mov	r3, r5
 80019b4:	4622      	mov	r2, r4
 80019b6:	4601      	mov	r1, r0
 80019b8:	486e      	ldr	r0, [pc, #440]	; (8001b74 <PIN_Setup+0x298>)
 80019ba:	f7fe fd7f 	bl	80004bc <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d113      	bne.n	80019f0 <PIN_Setup+0x114>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7bdb      	ldrb	r3, [r3, #15]
 80019cc:	2208      	movs	r2, #8
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10e      	bne.n	80019f0 <PIN_Setup+0x114>
 80019d2:	2008      	movs	r0, #8
 80019d4:	2402      	movs	r4, #2
 80019d6:	2500      	movs	r5, #0
 80019d8:	2302      	movs	r3, #2
 80019da:	2200      	movs	r2, #0
 80019dc:	2107      	movs	r1, #7
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4601      	mov	r1, r0
 80019ea:	4861      	ldr	r0, [pc, #388]	; (8001b70 <PIN_Setup+0x294>)
 80019ec:	f7fe fd66 	bl	80004bc <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7cdb      	ldrb	r3, [r3, #19]
 80019f4:	2200      	movs	r2, #0
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f000 83bb 	beq.w	8002172 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7cdb      	ldrb	r3, [r3, #19]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10e      	bne.n	8001a24 <PIN_Setup+0x148>
 8001a06:	200b      	movs	r0, #11
 8001a08:	2402      	movs	r4, #2
 8001a0a:	2500      	movs	r5, #0
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2107      	movs	r1, #7
 8001a12:	9102      	str	r1, [sp, #8]
 8001a14:	9201      	str	r2, [sp, #4]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	462b      	mov	r3, r5
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	4854      	ldr	r0, [pc, #336]	; (8001b70 <PIN_Setup+0x294>)
 8001a20:	f7fe fd4c 	bl	80004bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7cdb      	ldrb	r3, [r3, #19]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10e      	bne.n	8001a4c <PIN_Setup+0x170>
 8001a2e:	200c      	movs	r0, #12
 8001a30:	2402      	movs	r4, #2
 8001a32:	2500      	movs	r5, #0
 8001a34:	2302      	movs	r3, #2
 8001a36:	2200      	movs	r2, #0
 8001a38:	2107      	movs	r1, #7
 8001a3a:	9102      	str	r1, [sp, #8]
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	462b      	mov	r3, r5
 8001a42:	4622      	mov	r2, r4
 8001a44:	4601      	mov	r1, r0
 8001a46:	484a      	ldr	r0, [pc, #296]	; (8001b70 <PIN_Setup+0x294>)
 8001a48:	f7fe fd38 	bl	80004bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7cdb      	ldrb	r3, [r3, #19]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 838d 	bne.w	8002172 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001a58:	200b      	movs	r0, #11
 8001a5a:	2402      	movs	r4, #2
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	2302      	movs	r3, #2
 8001a60:	2200      	movs	r2, #0
 8001a62:	2107      	movs	r1, #7
 8001a64:	9102      	str	r1, [sp, #8]
 8001a66:	9201      	str	r2, [sp, #4]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	4601      	mov	r1, r0
 8001a70:	483f      	ldr	r0, [pc, #252]	; (8001b70 <PIN_Setup+0x294>)
 8001a72:	f7fe fd23 	bl	80004bc <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001a76:	200c      	movs	r0, #12
 8001a78:	2402      	movs	r4, #2
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2107      	movs	r1, #7
 8001a82:	9102      	str	r1, [sp, #8]
 8001a84:	9201      	str	r2, [sp, #4]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	462b      	mov	r3, r5
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	4838      	ldr	r0, [pc, #224]	; (8001b70 <PIN_Setup+0x294>)
 8001a90:	f7fe fd14 	bl	80004bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8001a94:	e36d      	b.n	8002172 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7b1b      	ldrb	r3, [r3, #12]
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00a      	beq.n	8001ab6 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d005      	beq.n	8001ab6 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7b1b      	ldrb	r3, [r3, #12]
 8001aae:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	f040 8363 	bne.w	800217c <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b5b      	ldrb	r3, [r3, #13]
 8001aba:	2209      	movs	r2, #9
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10e      	bne.n	8001ade <PIN_Setup+0x202>
 8001ac0:	2009      	movs	r0, #9
 8001ac2:	2402      	movs	r4, #2
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2107      	movs	r1, #7
 8001acc:	9102      	str	r1, [sp, #8]
 8001ace:	9201      	str	r2, [sp, #4]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4825      	ldr	r0, [pc, #148]	; (8001b70 <PIN_Setup+0x294>)
 8001ada:	f7fe fcef 	bl	80004bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b1b      	ldrb	r3, [r3, #12]
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f040 8349 	bne.w	800217c <PIN_Setup+0x8a0>
 8001aea:	2008      	movs	r0, #8
 8001aec:	2402      	movs	r4, #2
 8001aee:	2500      	movs	r5, #0
 8001af0:	2302      	movs	r3, #2
 8001af2:	2200      	movs	r2, #0
 8001af4:	2107      	movs	r1, #7
 8001af6:	9102      	str	r1, [sp, #8]
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	462b      	mov	r3, r5
 8001afe:	4622      	mov	r2, r4
 8001b00:	4601      	mov	r1, r0
 8001b02:	481b      	ldr	r0, [pc, #108]	; (8001b70 <PIN_Setup+0x294>)
 8001b04:	f7fe fcda 	bl	80004bc <GPIO_Pin_Init>
//
//		}
//	}


}
 8001b08:	e338      	b.n	800217c <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <PIN_Setup+0x29c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	f040 817b 	bne.w	8001e0c <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7b1b      	ldrb	r3, [r3, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00f      	beq.n	8001b40 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7b1b      	ldrb	r3, [r3, #12]
 8001b24:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00a      	beq.n	8001b40 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7b1b      	ldrb	r3, [r3, #12]
 8001b2e:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d005      	beq.n	8001b40 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7b1b      	ldrb	r3, [r3, #12]
 8001b38:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	f040 80f8 	bne.w	8001d30 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7b5b      	ldrb	r3, [r3, #13]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d118      	bne.n	8001b7c <PIN_Setup+0x2a0>
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	2402      	movs	r4, #2
 8001b4e:	2500      	movs	r5, #0
 8001b50:	2302      	movs	r3, #2
 8001b52:	2200      	movs	r2, #0
 8001b54:	2107      	movs	r1, #7
 8001b56:	9102      	str	r1, [sp, #8]
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	4622      	mov	r2, r4
 8001b60:	4601      	mov	r1, r0
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <PIN_Setup+0x294>)
 8001b64:	f7fe fcaa 	bl	80004bc <GPIO_Pin_Init>
 8001b68:	e01c      	b.n	8001ba4 <PIN_Setup+0x2c8>
 8001b6a:	bf00      	nop
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7b5b      	ldrb	r3, [r3, #13]
 8001b80:	2205      	movs	r2, #5
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d10e      	bne.n	8001ba4 <PIN_Setup+0x2c8>
 8001b86:	2005      	movs	r0, #5
 8001b88:	2402      	movs	r4, #2
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2107      	movs	r1, #7
 8001b92:	9102      	str	r1, [sp, #8]
 8001b94:	9201      	str	r2, [sp, #4]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	462b      	mov	r3, r5
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4899      	ldr	r0, [pc, #612]	; (8001e04 <PIN_Setup+0x528>)
 8001ba0:	f7fe fc8c 	bl	80004bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b9b      	ldrb	r3, [r3, #14]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10f      	bne.n	8001bce <PIN_Setup+0x2f2>
 8001bae:	2003      	movs	r0, #3
 8001bb0:	2402      	movs	r4, #2
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2107      	movs	r1, #7
 8001bba:	9102      	str	r1, [sp, #8]
 8001bbc:	9201      	str	r2, [sp, #4]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	4890      	ldr	r0, [pc, #576]	; (8001e08 <PIN_Setup+0x52c>)
 8001bc8:	f7fe fc78 	bl	80004bc <GPIO_Pin_Init>
 8001bcc:	e013      	b.n	8001bf6 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7b9b      	ldrb	r3, [r3, #14]
 8001bd2:	2206      	movs	r2, #6
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d10e      	bne.n	8001bf6 <PIN_Setup+0x31a>
 8001bd8:	2006      	movs	r0, #6
 8001bda:	2402      	movs	r4, #2
 8001bdc:	2500      	movs	r5, #0
 8001bde:	2302      	movs	r3, #2
 8001be0:	2200      	movs	r2, #0
 8001be2:	2107      	movs	r1, #7
 8001be4:	9102      	str	r1, [sp, #8]
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	462b      	mov	r3, r5
 8001bec:	4622      	mov	r2, r4
 8001bee:	4601      	mov	r1, r0
 8001bf0:	4884      	ldr	r0, [pc, #528]	; (8001e04 <PIN_Setup+0x528>)
 8001bf2:	f7fe fc63 	bl	80004bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7b1b      	ldrb	r3, [r3, #12]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d128      	bne.n	8001c52 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7bdb      	ldrb	r3, [r3, #15]
 8001c04:	2204      	movs	r2, #4
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10f      	bne.n	8001c2a <PIN_Setup+0x34e>
 8001c0a:	2004      	movs	r0, #4
 8001c0c:	2402      	movs	r4, #2
 8001c0e:	2500      	movs	r5, #0
 8001c10:	2302      	movs	r3, #2
 8001c12:	2200      	movs	r2, #0
 8001c14:	2107      	movs	r1, #7
 8001c16:	9102      	str	r1, [sp, #8]
 8001c18:	9201      	str	r2, [sp, #4]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	4622      	mov	r2, r4
 8001c20:	4601      	mov	r1, r0
 8001c22:	4879      	ldr	r0, [pc, #484]	; (8001e08 <PIN_Setup+0x52c>)
 8001c24:	f7fe fc4a 	bl	80004bc <GPIO_Pin_Init>
 8001c28:	e013      	b.n	8001c52 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7bdb      	ldrb	r3, [r3, #15]
 8001c2e:	2207      	movs	r2, #7
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d10e      	bne.n	8001c52 <PIN_Setup+0x376>
 8001c34:	2007      	movs	r0, #7
 8001c36:	2402      	movs	r4, #2
 8001c38:	2500      	movs	r5, #0
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2107      	movs	r1, #7
 8001c40:	9102      	str	r1, [sp, #8]
 8001c42:	9201      	str	r2, [sp, #4]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	462b      	mov	r3, r5
 8001c48:	4622      	mov	r2, r4
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	486e      	ldr	r0, [pc, #440]	; (8001e08 <PIN_Setup+0x52c>)
 8001c4e:	f7fe fc35 	bl	80004bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7cdb      	ldrb	r3, [r3, #19]
 8001c56:	2200      	movs	r2, #0
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d105      	bne.n	8001c68 <PIN_Setup+0x38c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7cdb      	ldrb	r3, [r3, #19]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4293      	cmp	r3, r2
 8001c64:	f040 8287 	bne.w	8002176 <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7cdb      	ldrb	r3, [r3, #19]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d128      	bne.n	8001cc4 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7bdb      	ldrb	r3, [r3, #15]
 8001c76:	2200      	movs	r2, #0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d10f      	bne.n	8001c9c <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	2402      	movs	r4, #2
 8001c80:	2500      	movs	r5, #0
 8001c82:	2302      	movs	r3, #2
 8001c84:	2200      	movs	r2, #0
 8001c86:	2107      	movs	r1, #7
 8001c88:	9102      	str	r1, [sp, #8]
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	462b      	mov	r3, r5
 8001c90:	4622      	mov	r2, r4
 8001c92:	4601      	mov	r1, r0
 8001c94:	485c      	ldr	r0, [pc, #368]	; (8001e08 <PIN_Setup+0x52c>)
 8001c96:	f7fe fc11 	bl	80004bc <GPIO_Pin_Init>
 8001c9a:	e013      	b.n	8001cc4 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7bdb      	ldrb	r3, [r3, #15]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10e      	bne.n	8001cc4 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	2402      	movs	r4, #2
 8001caa:	2500      	movs	r5, #0
 8001cac:	2302      	movs	r3, #2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2107      	movs	r1, #7
 8001cb2:	9102      	str	r1, [sp, #8]
 8001cb4:	9201      	str	r2, [sp, #4]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	462b      	mov	r3, r5
 8001cba:	4622      	mov	r2, r4
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4851      	ldr	r0, [pc, #324]	; (8001e04 <PIN_Setup+0x528>)
 8001cc0:	f7fe fbfc 	bl	80004bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7cdb      	ldrb	r3, [r3, #19]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d005      	beq.n	8001cda <PIN_Setup+0x3fe>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7cdb      	ldrb	r3, [r3, #19]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f040 824e 	bne.w	8002176 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7bdb      	ldrb	r3, [r3, #15]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10f      	bne.n	8001d04 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	2402      	movs	r4, #2
 8001ce8:	2500      	movs	r5, #0
 8001cea:	2302      	movs	r3, #2
 8001cec:	2200      	movs	r2, #0
 8001cee:	2107      	movs	r1, #7
 8001cf0:	9102      	str	r1, [sp, #8]
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	4842      	ldr	r0, [pc, #264]	; (8001e08 <PIN_Setup+0x52c>)
 8001cfe:	f7fe fbdd 	bl	80004bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8001d02:	e238      	b.n	8002176 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7bdb      	ldrb	r3, [r3, #15]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f040 8233 	bne.w	8002176 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001d10:	2004      	movs	r0, #4
 8001d12:	2402      	movs	r4, #2
 8001d14:	2500      	movs	r5, #0
 8001d16:	2302      	movs	r3, #2
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2107      	movs	r1, #7
 8001d1c:	9102      	str	r1, [sp, #8]
 8001d1e:	9201      	str	r2, [sp, #4]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	462b      	mov	r3, r5
 8001d24:	4622      	mov	r2, r4
 8001d26:	4601      	mov	r1, r0
 8001d28:	4836      	ldr	r0, [pc, #216]	; (8001e04 <PIN_Setup+0x528>)
 8001d2a:	f7fe fbc7 	bl	80004bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8001d2e:	e222      	b.n	8002176 <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7b1b      	ldrb	r3, [r3, #12]
 8001d34:	2206      	movs	r2, #6
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00a      	beq.n	8001d50 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7b1b      	ldrb	r3, [r3, #12]
 8001d3e:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d005      	beq.n	8001d50 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7b1b      	ldrb	r3, [r3, #12]
 8001d48:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 8216 	bne.w	800217c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7b5b      	ldrb	r3, [r3, #13]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10f      	bne.n	8001d7a <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	2402      	movs	r4, #2
 8001d5e:	2500      	movs	r5, #0
 8001d60:	2302      	movs	r3, #2
 8001d62:	2200      	movs	r2, #0
 8001d64:	2107      	movs	r1, #7
 8001d66:	9102      	str	r1, [sp, #8]
 8001d68:	9201      	str	r2, [sp, #4]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	462b      	mov	r3, r5
 8001d6e:	4622      	mov	r2, r4
 8001d70:	4601      	mov	r1, r0
 8001d72:	4825      	ldr	r0, [pc, #148]	; (8001e08 <PIN_Setup+0x52c>)
 8001d74:	f7fe fba2 	bl	80004bc <GPIO_Pin_Init>
 8001d78:	e013      	b.n	8001da2 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7b5b      	ldrb	r3, [r3, #13]
 8001d7e:	2205      	movs	r2, #5
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10e      	bne.n	8001da2 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001d84:	2005      	movs	r0, #5
 8001d86:	2402      	movs	r4, #2
 8001d88:	2500      	movs	r5, #0
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2107      	movs	r1, #7
 8001d90:	9102      	str	r1, [sp, #8]
 8001d92:	9201      	str	r2, [sp, #4]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	462b      	mov	r3, r5
 8001d98:	4622      	mov	r2, r4
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	4819      	ldr	r0, [pc, #100]	; (8001e04 <PIN_Setup+0x528>)
 8001d9e:	f7fe fb8d 	bl	80004bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	2207      	movs	r2, #7
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f040 81e7 	bne.w	800217c <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7bdb      	ldrb	r3, [r3, #15]
 8001db2:	2204      	movs	r2, #4
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10f      	bne.n	8001dd8 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001db8:	2004      	movs	r0, #4
 8001dba:	2402      	movs	r4, #2
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2107      	movs	r1, #7
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9201      	str	r2, [sp, #4]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	462b      	mov	r3, r5
 8001dcc:	4622      	mov	r2, r4
 8001dce:	4601      	mov	r1, r0
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <PIN_Setup+0x52c>)
 8001dd2:	f7fe fb73 	bl	80004bc <GPIO_Pin_Init>
}
 8001dd6:	e1d1      	b.n	800217c <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7bdb      	ldrb	r3, [r3, #15]
 8001ddc:	2207      	movs	r2, #7
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f040 81cc 	bne.w	800217c <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001de4:	2007      	movs	r0, #7
 8001de6:	2402      	movs	r4, #2
 8001de8:	2500      	movs	r5, #0
 8001dea:	2302      	movs	r3, #2
 8001dec:	2200      	movs	r2, #0
 8001dee:	2107      	movs	r1, #7
 8001df0:	9102      	str	r1, [sp, #8]
 8001df2:	9201      	str	r2, [sp, #4]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	462b      	mov	r3, r5
 8001df8:	4622      	mov	r2, r4
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <PIN_Setup+0x52c>)
 8001dfe:	f7fe fb5d 	bl	80004bc <GPIO_Pin_Init>
}
 8001e02:	e1bb      	b.n	800217c <PIN_Setup+0x8a0>
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4aaa      	ldr	r2, [pc, #680]	; (80020bc <PIN_Setup+0x7e0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	f040 81b2 	bne.w	800217c <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7b1b      	ldrb	r3, [r3, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00f      	beq.n	8001e42 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7b1b      	ldrb	r3, [r3, #12]
 8001e26:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00a      	beq.n	8001e42 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7b1b      	ldrb	r3, [r3, #12]
 8001e30:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d005      	beq.n	8001e42 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b1b      	ldrb	r3, [r3, #12]
 8001e3a:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	f040 8119 	bne.w	8002074 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7b5b      	ldrb	r3, [r3, #13]
 8001e46:	220b      	movs	r2, #11
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d10f      	bne.n	8001e6c <PIN_Setup+0x590>
 8001e4c:	200b      	movs	r0, #11
 8001e4e:	2402      	movs	r4, #2
 8001e50:	2500      	movs	r5, #0
 8001e52:	2302      	movs	r3, #2
 8001e54:	2200      	movs	r2, #0
 8001e56:	2107      	movs	r1, #7
 8001e58:	9102      	str	r1, [sp, #8]
 8001e5a:	9201      	str	r2, [sp, #4]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	462b      	mov	r3, r5
 8001e60:	4622      	mov	r2, r4
 8001e62:	4601      	mov	r1, r0
 8001e64:	4896      	ldr	r0, [pc, #600]	; (80020c0 <PIN_Setup+0x7e4>)
 8001e66:	f7fe fb29 	bl	80004bc <GPIO_Pin_Init>
 8001e6a:	e028      	b.n	8001ebe <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7b5b      	ldrb	r3, [r3, #13]
 8001e70:	220a      	movs	r2, #10
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10f      	bne.n	8001e96 <PIN_Setup+0x5ba>
 8001e76:	200a      	movs	r0, #10
 8001e78:	2402      	movs	r4, #2
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2107      	movs	r1, #7
 8001e82:	9102      	str	r1, [sp, #8]
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	462b      	mov	r3, r5
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	488d      	ldr	r0, [pc, #564]	; (80020c4 <PIN_Setup+0x7e8>)
 8001e90:	f7fe fb14 	bl	80004bc <GPIO_Pin_Init>
 8001e94:	e013      	b.n	8001ebe <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7b5b      	ldrb	r3, [r3, #13]
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10e      	bne.n	8001ebe <PIN_Setup+0x5e2>
 8001ea0:	2008      	movs	r0, #8
 8001ea2:	2402      	movs	r4, #2
 8001ea4:	2500      	movs	r5, #0
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2107      	movs	r1, #7
 8001eac:	9102      	str	r1, [sp, #8]
 8001eae:	9201      	str	r2, [sp, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	4882      	ldr	r0, [pc, #520]	; (80020c4 <PIN_Setup+0x7e8>)
 8001eba:	f7fe faff 	bl	80004bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7b9b      	ldrb	r3, [r3, #14]
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10f      	bne.n	8001ee8 <PIN_Setup+0x60c>
 8001ec8:	200a      	movs	r0, #10
 8001eca:	2402      	movs	r4, #2
 8001ecc:	2500      	movs	r5, #0
 8001ece:	2302      	movs	r3, #2
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2107      	movs	r1, #7
 8001ed4:	9102      	str	r1, [sp, #8]
 8001ed6:	9201      	str	r2, [sp, #4]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	462b      	mov	r3, r5
 8001edc:	4622      	mov	r2, r4
 8001ede:	4601      	mov	r1, r0
 8001ee0:	4877      	ldr	r0, [pc, #476]	; (80020c0 <PIN_Setup+0x7e4>)
 8001ee2:	f7fe faeb 	bl	80004bc <GPIO_Pin_Init>
 8001ee6:	e028      	b.n	8001f3a <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7b9b      	ldrb	r3, [r3, #14]
 8001eec:	220b      	movs	r2, #11
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10f      	bne.n	8001f12 <PIN_Setup+0x636>
 8001ef2:	200b      	movs	r0, #11
 8001ef4:	2402      	movs	r4, #2
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	2302      	movs	r3, #2
 8001efa:	2200      	movs	r2, #0
 8001efc:	2107      	movs	r1, #7
 8001efe:	9102      	str	r1, [sp, #8]
 8001f00:	9201      	str	r2, [sp, #4]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	462b      	mov	r3, r5
 8001f06:	4622      	mov	r2, r4
 8001f08:	4601      	mov	r1, r0
 8001f0a:	486e      	ldr	r0, [pc, #440]	; (80020c4 <PIN_Setup+0x7e8>)
 8001f0c:	f7fe fad6 	bl	80004bc <GPIO_Pin_Init>
 8001f10:	e013      	b.n	8001f3a <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7b5b      	ldrb	r3, [r3, #13]
 8001f16:	2208      	movs	r2, #8
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10e      	bne.n	8001f3a <PIN_Setup+0x65e>
 8001f1c:	2008      	movs	r0, #8
 8001f1e:	2402      	movs	r4, #2
 8001f20:	2500      	movs	r5, #0
 8001f22:	2302      	movs	r3, #2
 8001f24:	2200      	movs	r2, #0
 8001f26:	2107      	movs	r1, #7
 8001f28:	9102      	str	r1, [sp, #8]
 8001f2a:	9201      	str	r2, [sp, #4]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	462b      	mov	r3, r5
 8001f30:	4622      	mov	r2, r4
 8001f32:	4601      	mov	r1, r0
 8001f34:	4863      	ldr	r0, [pc, #396]	; (80020c4 <PIN_Setup+0x7e8>)
 8001f36:	f7fe fac1 	bl	80004bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b1b      	ldrb	r3, [r3, #12]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d128      	bne.n	8001f96 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7bdb      	ldrb	r3, [r3, #15]
 8001f48:	220c      	movs	r2, #12
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10f      	bne.n	8001f6e <PIN_Setup+0x692>
 8001f4e:	200c      	movs	r0, #12
 8001f50:	2402      	movs	r4, #2
 8001f52:	2500      	movs	r5, #0
 8001f54:	2302      	movs	r3, #2
 8001f56:	2200      	movs	r2, #0
 8001f58:	2107      	movs	r1, #7
 8001f5a:	9102      	str	r1, [sp, #8]
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	462b      	mov	r3, r5
 8001f62:	4622      	mov	r2, r4
 8001f64:	4601      	mov	r1, r0
 8001f66:	4857      	ldr	r0, [pc, #348]	; (80020c4 <PIN_Setup+0x7e8>)
 8001f68:	f7fe faa8 	bl	80004bc <GPIO_Pin_Init>
 8001f6c:	e013      	b.n	8001f96 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7bdb      	ldrb	r3, [r3, #15]
 8001f72:	220a      	movs	r2, #10
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10e      	bne.n	8001f96 <PIN_Setup+0x6ba>
 8001f78:	200a      	movs	r0, #10
 8001f7a:	2402      	movs	r4, #2
 8001f7c:	2500      	movs	r5, #0
 8001f7e:	2302      	movs	r3, #2
 8001f80:	2200      	movs	r2, #0
 8001f82:	2107      	movs	r1, #7
 8001f84:	9102      	str	r1, [sp, #8]
 8001f86:	9201      	str	r2, [sp, #4]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	4601      	mov	r1, r0
 8001f90:	484d      	ldr	r0, [pc, #308]	; (80020c8 <PIN_Setup+0x7ec>)
 8001f92:	f7fe fa93 	bl	80004bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7cdb      	ldrb	r3, [r3, #19]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	f000 80ec 	beq.w	800217a <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7cdb      	ldrb	r3, [r3, #19]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <PIN_Setup+0x6da>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7cdb      	ldrb	r3, [r3, #19]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d128      	bne.n	8002008 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7bdb      	ldrb	r3, [r3, #15]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10f      	bne.n	8001fe0 <PIN_Setup+0x704>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	2402      	movs	r4, #2
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2107      	movs	r1, #7
 8001fcc:	9102      	str	r1, [sp, #8]
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	483a      	ldr	r0, [pc, #232]	; (80020c4 <PIN_Setup+0x7e8>)
 8001fda:	f7fe fa6f 	bl	80004bc <GPIO_Pin_Init>
 8001fde:	e013      	b.n	8002008 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7bdb      	ldrb	r3, [r3, #15]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10e      	bne.n	8002008 <PIN_Setup+0x72c>
 8001fea:	2003      	movs	r0, #3
 8001fec:	2402      	movs	r4, #2
 8001fee:	2500      	movs	r5, #0
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	9102      	str	r1, [sp, #8]
 8001ff8:	9201      	str	r2, [sp, #4]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	462b      	mov	r3, r5
 8001ffe:	4622      	mov	r2, r4
 8002000:	4601      	mov	r1, r0
 8002002:	4831      	ldr	r0, [pc, #196]	; (80020c8 <PIN_Setup+0x7ec>)
 8002004:	f7fe fa5a 	bl	80004bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7cdb      	ldrb	r3, [r3, #19]
 800200c:	2202      	movs	r2, #2
 800200e:	4293      	cmp	r3, r2
 8002010:	d005      	beq.n	800201e <PIN_Setup+0x742>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7cdb      	ldrb	r3, [r3, #19]
 8002016:	2203      	movs	r2, #3
 8002018:	4293      	cmp	r3, r2
 800201a:	f040 80ae 	bne.w	800217a <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7bdb      	ldrb	r3, [r3, #15]
 8002022:	2201      	movs	r2, #1
 8002024:	4293      	cmp	r3, r2
 8002026:	d10f      	bne.n	8002048 <PIN_Setup+0x76c>
 8002028:	2001      	movs	r0, #1
 800202a:	2402      	movs	r4, #2
 800202c:	2500      	movs	r5, #0
 800202e:	2302      	movs	r3, #2
 8002030:	2200      	movs	r2, #0
 8002032:	2107      	movs	r1, #7
 8002034:	9102      	str	r1, [sp, #8]
 8002036:	9201      	str	r2, [sp, #4]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	462b      	mov	r3, r5
 800203c:	4622      	mov	r2, r4
 800203e:	4601      	mov	r1, r0
 8002040:	4820      	ldr	r0, [pc, #128]	; (80020c4 <PIN_Setup+0x7e8>)
 8002042:	f7fe fa3b 	bl	80004bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002046:	e098      	b.n	800217a <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7bdb      	ldrb	r3, [r3, #15]
 800204c:	2204      	movs	r2, #4
 800204e:	4293      	cmp	r3, r2
 8002050:	f040 8093 	bne.w	800217a <PIN_Setup+0x89e>
 8002054:	2004      	movs	r0, #4
 8002056:	2402      	movs	r4, #2
 8002058:	2500      	movs	r5, #0
 800205a:	2302      	movs	r3, #2
 800205c:	2200      	movs	r2, #0
 800205e:	2107      	movs	r1, #7
 8002060:	9102      	str	r1, [sp, #8]
 8002062:	9201      	str	r2, [sp, #4]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	462b      	mov	r3, r5
 8002068:	4622      	mov	r2, r4
 800206a:	4601      	mov	r1, r0
 800206c:	4816      	ldr	r0, [pc, #88]	; (80020c8 <PIN_Setup+0x7ec>)
 800206e:	f7fe fa25 	bl	80004bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002072:	e082      	b.n	800217a <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7b1b      	ldrb	r3, [r3, #12]
 8002078:	2206      	movs	r2, #6
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b1b      	ldrb	r3, [r3, #12]
 8002082:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7b1b      	ldrb	r3, [r3, #12]
 800208c:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800208e:	4293      	cmp	r3, r2
 8002090:	d174      	bne.n	800217c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7b5b      	ldrb	r3, [r3, #13]
 8002096:	220b      	movs	r2, #11
 8002098:	4293      	cmp	r3, r2
 800209a:	d117      	bne.n	80020cc <PIN_Setup+0x7f0>
 800209c:	200b      	movs	r0, #11
 800209e:	2402      	movs	r4, #2
 80020a0:	2500      	movs	r5, #0
 80020a2:	2302      	movs	r3, #2
 80020a4:	2200      	movs	r2, #0
 80020a6:	2107      	movs	r1, #7
 80020a8:	9102      	str	r1, [sp, #8]
 80020aa:	9201      	str	r2, [sp, #4]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	462b      	mov	r3, r5
 80020b0:	4622      	mov	r2, r4
 80020b2:	4601      	mov	r1, r0
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <PIN_Setup+0x7e4>)
 80020b6:	f7fe fa01 	bl	80004bc <GPIO_Pin_Init>
 80020ba:	e030      	b.n	800211e <PIN_Setup+0x842>
 80020bc:	40004800 	.word	0x40004800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7b5b      	ldrb	r3, [r3, #13]
 80020d0:	220a      	movs	r2, #10
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10f      	bne.n	80020f6 <PIN_Setup+0x81a>
 80020d6:	200a      	movs	r0, #10
 80020d8:	2402      	movs	r4, #2
 80020da:	2500      	movs	r5, #0
 80020dc:	2302      	movs	r3, #2
 80020de:	2200      	movs	r2, #0
 80020e0:	2107      	movs	r1, #7
 80020e2:	9102      	str	r1, [sp, #8]
 80020e4:	9201      	str	r2, [sp, #4]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	462b      	mov	r3, r5
 80020ea:	4622      	mov	r2, r4
 80020ec:	4601      	mov	r1, r0
 80020ee:	4825      	ldr	r0, [pc, #148]	; (8002184 <PIN_Setup+0x8a8>)
 80020f0:	f7fe f9e4 	bl	80004bc <GPIO_Pin_Init>
 80020f4:	e013      	b.n	800211e <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7b5b      	ldrb	r3, [r3, #13]
 80020fa:	2208      	movs	r2, #8
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d10e      	bne.n	800211e <PIN_Setup+0x842>
 8002100:	2008      	movs	r0, #8
 8002102:	2402      	movs	r4, #2
 8002104:	2500      	movs	r5, #0
 8002106:	2302      	movs	r3, #2
 8002108:	2200      	movs	r2, #0
 800210a:	2107      	movs	r1, #7
 800210c:	9102      	str	r1, [sp, #8]
 800210e:	9201      	str	r2, [sp, #4]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	462b      	mov	r3, r5
 8002114:	4622      	mov	r2, r4
 8002116:	4601      	mov	r1, r0
 8002118:	481a      	ldr	r0, [pc, #104]	; (8002184 <PIN_Setup+0x8a8>)
 800211a:	f7fe f9cf 	bl	80004bc <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7bdb      	ldrb	r3, [r3, #15]
 8002122:	220c      	movs	r2, #12
 8002124:	4293      	cmp	r3, r2
 8002126:	d10f      	bne.n	8002148 <PIN_Setup+0x86c>
 8002128:	200c      	movs	r0, #12
 800212a:	2402      	movs	r4, #2
 800212c:	2500      	movs	r5, #0
 800212e:	2302      	movs	r3, #2
 8002130:	2200      	movs	r2, #0
 8002132:	2107      	movs	r1, #7
 8002134:	9102      	str	r1, [sp, #8]
 8002136:	9201      	str	r2, [sp, #4]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	462b      	mov	r3, r5
 800213c:	4622      	mov	r2, r4
 800213e:	4601      	mov	r1, r0
 8002140:	4810      	ldr	r0, [pc, #64]	; (8002184 <PIN_Setup+0x8a8>)
 8002142:	f7fe f9bb 	bl	80004bc <GPIO_Pin_Init>
}
 8002146:	e019      	b.n	800217c <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7bdb      	ldrb	r3, [r3, #15]
 800214c:	220a      	movs	r2, #10
 800214e:	4293      	cmp	r3, r2
 8002150:	d114      	bne.n	800217c <PIN_Setup+0x8a0>
 8002152:	200a      	movs	r0, #10
 8002154:	2402      	movs	r4, #2
 8002156:	2500      	movs	r5, #0
 8002158:	2302      	movs	r3, #2
 800215a:	2200      	movs	r2, #0
 800215c:	2107      	movs	r1, #7
 800215e:	9102      	str	r1, [sp, #8]
 8002160:	9201      	str	r2, [sp, #4]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	462b      	mov	r3, r5
 8002166:	4622      	mov	r2, r4
 8002168:	4601      	mov	r1, r0
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <PIN_Setup+0x8ac>)
 800216c:	f7fe f9a6 	bl	80004bc <GPIO_Pin_Init>
}
 8002170:	e004      	b.n	800217c <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800217a:	bf00      	nop
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bdb0      	pop	{r4, r5, r7, pc}
 8002184:	40020400 	.word	0x40020400
 8002188:	40020c00 	.word	0x40020c00

0800218c <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fafd 	bl	8001794 <USART_Clock_Enable>
	PIN_Setup(config);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fb9e 	bl	80018dc <PIN_Setup>

	config->Port->BRR = (int)(84000000 / (16 * config->baudrate)) << 4;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <USART_Init+0xb0>)
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	011a      	lsls	r2, r3, #4
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7d9b      	ldrb	r3, [r3, #22]
 80021be:	4619      	mov	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7c9b      	ldrb	r3, [r3, #18]
 80021d2:	4619      	mov	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7d1b      	ldrb	r3, [r3, #20]
 80021e6:	4619      	mov	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]
	config->Port ->CR1 |= USART_CR1_UE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fe:	60da      	str	r2, [r3, #12]
	config->Port ->CR1 |= USART_CR1_TE ;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	60da      	str	r2, [r3, #12]
	config->Port ->CR1 |= USART_CR1_RE | USART_CR1_RXNEIE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 800221e:	60da      	str	r2, [r3, #12]
	config->Port ->CR1 |= USART_CR1_UE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222e:	60da      	str	r2, [r3, #12]

//	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
//	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;

	return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	0501bd00 	.word	0x0501bd00

08002240 <Delay_ms>:
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800224a:	edd7 7a01 	vldr	s15, [r7, #4]
 800224e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002294 <Delay_ms+0x54>
 8002252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800225a:	ee17 3a90 	vmov	r3, s15
 800225e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <Delay_ms+0x58>)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <Delay_ms+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <Delay_ms+0x58>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a09      	ldr	r2, [pc, #36]	; (8002298 <Delay_ms+0x58>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002278:	bf00      	nop
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <Delay_ms+0x58>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f9      	beq.n	800227a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	48241000 	.word	0x48241000
 8002298:	e000e010 	.word	0xe000e010

0800229c <Delay_s>:
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 80022b0:	e006      	b.n	80022c0 <Delay_s+0x24>
		Delay_ms(1);
 80022b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022b6:	f7ff ffc3 	bl	8002240 <Delay_ms>
	for (; s>0; s--)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3b01      	subs	r3, #1
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f5      	bne.n	80022b2 <Delay_s+0x16>
	return (0UL);
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <W5500_Init>:




int W5500_Init(W5500_Config *config)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	SPI_Init(&config->SPI);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fe18 	bl	8000f10 <SPI_Init>
	SPI_Enable(&config->SPI);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fe93 	bl	800100e <SPI_Enable>
	SPI_NSS_High(&config->SPI);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe feda 	bl	80010a4 <SPI_NSS_High>

	Write_1_Byte(config, W5500_Common_Register.Mode, W5500_Control_Register.Common_Register , 1<<7);
 80022f0:	2100      	movs	r1, #0
 80022f2:	2200      	movs	r2, #0
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8f5 	bl	80024e6 <Write_1_Byte>
	Delay_s(1);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff ffcd 	bl	800229c <Delay_s>


	// Read ID
	counter = counter_reset;
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <W5500_Init+0x16c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <W5500_Init+0x170>)
 8002308:	6013      	str	r3, [r2, #0]
	while(counter < counter_overflow)
 800230a:	e010      	b.n	800232e <W5500_Init+0x5e>
	{
		uint8_t ID = W5500_Read_ID(config);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f89b 	bl	8002448 <W5500_Read_ID>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
		if(ID == 4) break;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d00f      	beq.n	800233c <W5500_Init+0x6c>
		counter ++;
 800231c:	4b48      	ldr	r3, [pc, #288]	; (8002440 <W5500_Init+0x170>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a47      	ldr	r2, [pc, #284]	; (8002440 <W5500_Init+0x170>)
 8002324:	6013      	str	r3, [r2, #0]
		Delay_ms(10);
 8002326:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800232a:	f7ff ff89 	bl	8002240 <Delay_ms>
	while(counter < counter_overflow)
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <W5500_Init+0x170>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <W5500_Init+0x174>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	dbe8      	blt.n	800230c <W5500_Init+0x3c>
 800233a:	e000      	b.n	800233e <W5500_Init+0x6e>
		if(ID == 4) break;
 800233c:	bf00      	nop
	}
	if(counter >= counter_overflow) return -2;
 800233e:	4b40      	ldr	r3, [pc, #256]	; (8002440 <W5500_Init+0x170>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b40      	ldr	r3, [pc, #256]	; (8002444 <W5500_Init+0x174>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	db02      	blt.n	8002350 <W5500_Init+0x80>
 800234a:	f06f 0301 	mvn.w	r3, #1
 800234e:	e070      	b.n	8002432 <W5500_Init+0x162>
/***************************************************************************************************************/
	// Check Up Link
	counter = counter_reset;
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <W5500_Init+0x16c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <W5500_Init+0x170>)
 8002356:	6013      	str	r3, [r2, #0]
	while(counter < counter_overflow)
 8002358:	e014      	b.n	8002384 <W5500_Init+0xb4>
	{
		uint8_t Link ;
		Read_1_Byte(config, W5500_Common_Register.PHY_Configuration, W5500_Control_Register.Common_Register, &Link);
 800235a:	212e      	movs	r1, #46	; 0x2e
 800235c:	2200      	movs	r2, #0
 800235e:	f107 030b 	add.w	r3, r7, #11
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9c2 	bl	80026ec <Read_1_Byte>
		if(Link & 0x01) break;
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <W5500_Init+0xc2>
		counter ++;
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <W5500_Init+0x170>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a31      	ldr	r2, [pc, #196]	; (8002440 <W5500_Init+0x170>)
 800237a:	6013      	str	r3, [r2, #0]
		Delay_ms(10);
 800237c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002380:	f7ff ff5e 	bl	8002240 <Delay_ms>
	while(counter < counter_overflow)
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <W5500_Init+0x170>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <W5500_Init+0x174>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbe4      	blt.n	800235a <W5500_Init+0x8a>
 8002390:	e000      	b.n	8002394 <W5500_Init+0xc4>
		if(Link & 0x01) break;
 8002392:	bf00      	nop
	}
	if(counter >= counter_overflow) return -3;
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <W5500_Init+0x170>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <W5500_Init+0x174>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	db02      	blt.n	80023a6 <W5500_Init+0xd6>
 80023a0:	f06f 0302 	mvn.w	r3, #2
 80023a4:	e045      	b.n	8002432 <W5500_Init+0x162>
#if W5500_DEBUG_FLAG
// Print Speed, Status, Mode
#endif
/***************************************************************************************************************/
	counter = counter_reset;
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <W5500_Init+0x16c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <W5500_Init+0x170>)
 80023ac:	6013      	str	r3, [r2, #0]
	W5500_Setup_Source_Hardware_Address(config);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f878 	bl	80024a4 <W5500_Setup_Source_Hardware_Address>
	W5500_Setup_Gateway_Address(config);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f857 	bl	8002468 <W5500_Setup_Gateway_Address>
	W5500_Setup_Source_IP_Address(config);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f884 	bl	80024c8 <W5500_Setup_Source_IP_Address>
	W5500_Setup_Subnet_Mask_Address(config);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f860 	bl	8002486 <W5500_Setup_Subnet_Mask_Address>
	uint8_t data[2];
	data[0] = config->Source_Port >> 8;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	733b      	strb	r3, [r7, #12]
	data[1] = config->Source_Port;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	737b      	strb	r3, [r7, #13]
	Write_2_Byte(config, W5500_Socket_Register.Sn_PORT_0, W5500_Control_Register.Socket_0_Control, &data[0]);
 80023da:	2104      	movs	r1, #4
 80023dc:	2201      	movs	r2, #1
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8b7 	bl	8002556 <Write_2_Byte>


	data[0] = 0xFF;
 80023e8:	23ff      	movs	r3, #255	; 0xff
 80023ea:	733b      	strb	r3, [r7, #12]
	data[1] = 0xFE;
 80023ec:	23fe      	movs	r3, #254	; 0xfe
 80023ee:	737b      	strb	r3, [r7, #13]
	Write_1_Byte(config, W5500_Common_Register.Retry_Time_0, W5500_Control_Register.Common_Register, data[0]);
 80023f0:	2119      	movs	r1, #25
 80023f2:	2200      	movs	r2, #0
 80023f4:	7b3b      	ldrb	r3, [r7, #12]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f875 	bl	80024e6 <Write_1_Byte>
	Write_1_Byte(config, W5500_Common_Register.Retry_Time_1, W5500_Control_Register.Common_Register, data[1]);
 80023fc:	211a      	movs	r1, #26
 80023fe:	2200      	movs	r2, #0
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f86f 	bl	80024e6 <Write_1_Byte>
	data[0] = 0xF5;
 8002408:	23f5      	movs	r3, #245	; 0xf5
 800240a:	733b      	strb	r3, [r7, #12]
	Write_1_Byte(config, W5500_Common_Register.Retry_Count, W5500_Control_Register.Common_Register, data[0]);
 800240c:	211b      	movs	r1, #27
 800240e:	2200      	movs	r2, #0
 8002410:	7b3b      	ldrb	r3, [r7, #12]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f867 	bl	80024e6 <Write_1_Byte>
	Write_1_Byte(config, W5500_Socket_Register.Sn_TXBUF_SIZE, W5500_Control_Register.Socket_0_Control, 16);
 8002418:	211f      	movs	r1, #31
 800241a:	2201      	movs	r2, #1
 800241c:	2310      	movs	r3, #16
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f861 	bl	80024e6 <Write_1_Byte>
	Write_1_Byte(config, W5500_Socket_Register.Sn_RXBUF_SIZE, W5500_Control_Register.Socket_0_Control, 16);
 8002424:	211e      	movs	r1, #30
 8002426:	2201      	movs	r2, #1
 8002428:	2310      	movs	r3, #16
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f85b 	bl	80024e6 <Write_1_Byte>

	return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000e8 	.word	0x200000e8
 8002440:	200000ec 	.word	0x200000ec
 8002444:	20000004 	.word	0x20000004

08002448 <W5500_Read_ID>:
#include "W5500_HAL.h"



uint8_t W5500_Read_ID(W5500_Config *config)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	uint8_t id;
	Read_1_Byte(config, W5500_Common_Register.Chip_Version, W5500_Control_Register.Common_Register, &id);
 8002450:	2139      	movs	r1, #57	; 0x39
 8002452:	2200      	movs	r2, #0
 8002454:	f107 030f 	add.w	r3, r7, #15
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f947 	bl	80026ec <Read_1_Byte>
	return id;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <W5500_Setup_Gateway_Address>:
	Read_1_Byte(config, W5500_Socket_Register.Sn_TTL, W5500_Control_Register.Socket_0_Control, &mode);
	return mode;
}

void W5500_Setup_Gateway_Address(W5500_Config *config)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

	Write_4_Byte(config, W5500_Common_Register.Gateway_Address_0, W5500_Control_Register.Common_Register, config->Gateway_Address);
 8002470:	2101      	movs	r1, #1
 8002472:	2200      	movs	r2, #0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8a9 	bl	80025d0 <Write_4_Byte>
#if W5500_DEBUG_FLAG
	uint32_t gateway_address;
	W5500_Read_Gateway_Address(config, &gateway_address);
#endif
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <W5500_Setup_Subnet_Mask_Address>:

void W5500_Setup_Subnet_Mask_Address(W5500_Config *config)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]

	Write_4_Byte(config, W5500_Common_Register.Subnet_Mask_Address_0, W5500_Control_Register.Common_Register, config->Subnet_Mask_Address);
 800248e:	2105      	movs	r1, #5
 8002490:	2200      	movs	r2, #0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f89a 	bl	80025d0 <Write_4_Byte>
#if W5500_DEBUG_FLAG
	uint32_t subnetmask_address;
	W5500_Read_Subnet_Mask_Address(config, &subnetmask_address);
#endif
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <W5500_Setup_Source_Hardware_Address>:

void W5500_Setup_Source_Hardware_Address(W5500_Config *config)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
	Write_Multiple_Bytes(config, W5500_Common_Register.Source_Hardware_Address_0, W5500_Control_Register.Common_Register, config->Source_Hardware_Address, 6);
 80024ac:	2109      	movs	r1, #9
 80024ae:	2000      	movs	r0, #0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	2206      	movs	r2, #6
 80024b6:	9200      	str	r2, [sp, #0]
 80024b8:	4602      	mov	r2, r0
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8d5 	bl	800266a <Write_Multiple_Bytes>
	uint64_t sourcehardwareaddress = (uint64_t)(((uint64_t)data[0] << (8*5)) | ((uint64_t)data[1] << (8*4) | ((uint64_t)data[2] << (8*3)) |
						  ((uint64_t)data[3] << (8*2)) | ((uint64_t)data[4] << (8*1)) | ((uint64_t)data[0] << (8*0))));
#endif


}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <W5500_Setup_Source_IP_Address>:

void W5500_Setup_Source_IP_Address(W5500_Config *config)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

	Write_4_Byte(config, W5500_Common_Register.Source_IP_Address_0, W5500_Control_Register.Common_Register, config->Source_IP_Address);
 80024d0:	210f      	movs	r1, #15
 80024d2:	2200      	movs	r2, #0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f879 	bl	80025d0 <Write_4_Byte>
	uint32_t sourceipaddress;
	W5500_Read_Source_IP_Address(config, &sourceipaddress);
#endif


}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <Write_1_Byte>:

#include "W5500_LL.h"
#include "SPI.h"

void Write_1_Byte(W5500_Config *config,uint16_t offset, uint8_t control_register, uint8_t data)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	4608      	mov	r0, r1
 80024f0:	4611      	mov	r1, r2
 80024f2:	461a      	mov	r2, r3
 80024f4:	4603      	mov	r3, r0
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	460b      	mov	r3, r1
 80024fa:	707b      	strb	r3, [r7, #1]
 80024fc:	4613      	mov	r3, r2
 80024fe:	703b      	strb	r3, [r7, #0]
	SPI_Config *w5500_spi = &config->SPI;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60fb      	str	r3, [r7, #12]
	SPI_NSS_Low(w5500_spi);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7fe fddd 	bl	80010c4 <SPI_NSS_Low>
	SPI_TRX_Byte(w5500_spi, (0xFF00 & offset)>>8);
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	b29b      	uxth	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7fe fd8d 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (0x00FF & offset)>>0);
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7fe fd86 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (control_register<<3|(1<<2)|(1<<0)));
 8002526:	787b      	ldrb	r3, [r7, #1]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	b21b      	sxth	r3, r3
 800252c:	f043 0305 	orr.w	r3, r3, #5
 8002530:	b21b      	sxth	r3, r3
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7fe fd7b 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data);
 800253c:	783b      	ldrb	r3, [r7, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7fe fd75 	bl	8001032 <SPI_TRX_Byte>
	SPI_NSS_High(w5500_spi);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7fe fdab 	bl	80010a4 <SPI_NSS_High>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <Write_2_Byte>:

void Write_2_Byte(W5500_Config *config,uint16_t offset, uint8_t control_register, uint8_t data[2])
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	817b      	strh	r3, [r7, #10]
 8002564:	4613      	mov	r3, r2
 8002566:	727b      	strb	r3, [r7, #9]
	SPI_Config *w5500_spi = &config->SPI;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	617b      	str	r3, [r7, #20]
	SPI_NSS_Low(w5500_spi);
 800256c:	6978      	ldr	r0, [r7, #20]
 800256e:	f7fe fda9 	bl	80010c4 <SPI_NSS_Low>
	SPI_TRX_Byte(w5500_spi, (0xFF00 & offset)>>8);
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b29b      	uxth	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7fe fd59 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (0x00FF & offset)>>0);
 8002580:	897b      	ldrh	r3, [r7, #10]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f7fe fd52 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (control_register<<3|(1<<2)|(2<<0)));
 800258e:	7a7b      	ldrb	r3, [r7, #9]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	b21b      	sxth	r3, r3
 8002594:	f043 0306 	orr.w	r3, r3, #6
 8002598:	b21b      	sxth	r3, r3
 800259a:	b29b      	uxth	r3, r3
 800259c:	4619      	mov	r1, r3
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7fe fd47 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data[0]);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f7fe fd40 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data[1]);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3301      	adds	r3, #1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7fe fd38 	bl	8001032 <SPI_TRX_Byte>
	SPI_NSS_High(w5500_spi);
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7fe fd6e 	bl	80010a4 <SPI_NSS_High>
}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <Write_4_Byte>:

void Write_4_Byte(W5500_Config *config,uint16_t offset, uint8_t control_register, uint8_t data[4])
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	4613      	mov	r3, r2
 80025e0:	727b      	strb	r3, [r7, #9]
	SPI_Config *w5500_spi = &config->SPI;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	617b      	str	r3, [r7, #20]
	SPI_NSS_Low(w5500_spi);
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7fe fd6c 	bl	80010c4 <SPI_NSS_Low>
	SPI_TRX_Byte(w5500_spi, (0xFF00 & offset)>>8);
 80025ec:	897b      	ldrh	r3, [r7, #10]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4619      	mov	r1, r3
 80025f4:	6978      	ldr	r0, [r7, #20]
 80025f6:	f7fe fd1c 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (0x00FF & offset)>>0);
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7fe fd15 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (control_register<<3|(1<<2)|(3<<0)));
 8002608:	7a7b      	ldrb	r3, [r7, #9]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	b21b      	sxth	r3, r3
 800260e:	f043 0307 	orr.w	r3, r3, #7
 8002612:	b21b      	sxth	r3, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f7fe fd0a 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data[0]);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7fe fd03 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data[1]);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7fe fcfb 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data[2]);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3302      	adds	r3, #2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	4619      	mov	r1, r3
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7fe fcf3 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, data[3]);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3303      	adds	r3, #3
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4619      	mov	r1, r3
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7fe fceb 	bl	8001032 <SPI_TRX_Byte>
	SPI_NSS_High(w5500_spi);
 800265c:	6978      	ldr	r0, [r7, #20]
 800265e:	f7fe fd21 	bl	80010a4 <SPI_NSS_High>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <Write_Multiple_Bytes>:

void Write_Multiple_Bytes(W5500_Config *config,uint16_t offset, uint8_t control_register, uint8_t *data, uint16_t length)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
 8002678:	4613      	mov	r3, r2
 800267a:	727b      	strb	r3, [r7, #9]
	SPI_Config *w5500_spi = &config->SPI;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	613b      	str	r3, [r7, #16]
	SPI_NSS_Low(w5500_spi);
 8002680:	6938      	ldr	r0, [r7, #16]
 8002682:	f7fe fd1f 	bl	80010c4 <SPI_NSS_Low>
	SPI_TRX_Byte(w5500_spi, (0xFF00 & offset)>>8);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	b29b      	uxth	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	6938      	ldr	r0, [r7, #16]
 8002690:	f7fe fccf 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (0x00FF & offset)>>0);
 8002694:	897b      	ldrh	r3, [r7, #10]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6938      	ldr	r0, [r7, #16]
 800269e:	f7fe fcc8 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (control_register<<3|(1<<2)));
 80026a2:	7a7b      	ldrb	r3, [r7, #9]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	6938      	ldr	r0, [r7, #16]
 80026b4:	f7fe fcbd 	bl	8001032 <SPI_TRX_Byte>
	for(uint16_t i = 0; i < length; i++ )
 80026b8:	2300      	movs	r3, #0
 80026ba:	82fb      	strh	r3, [r7, #22]
 80026bc:	e00b      	b.n	80026d6 <Write_Multiple_Bytes+0x6c>
	{
		SPI_TRX_Byte(w5500_spi, data[i]);
 80026be:	8afb      	ldrh	r3, [r7, #22]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4619      	mov	r1, r3
 80026ca:	6938      	ldr	r0, [r7, #16]
 80026cc:	f7fe fcb1 	bl	8001032 <SPI_TRX_Byte>
	for(uint16_t i = 0; i < length; i++ )
 80026d0:	8afb      	ldrh	r3, [r7, #22]
 80026d2:	3301      	adds	r3, #1
 80026d4:	82fb      	strh	r3, [r7, #22]
 80026d6:	8afa      	ldrh	r2, [r7, #22]
 80026d8:	8c3b      	ldrh	r3, [r7, #32]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3ef      	bcc.n	80026be <Write_Multiple_Bytes+0x54>
	}
	SPI_NSS_High(w5500_spi);
 80026de:	6938      	ldr	r0, [r7, #16]
 80026e0:	f7fe fce0 	bl	80010a4 <SPI_NSS_High>

}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <Read_1_Byte>:



void Read_1_Byte(W5500_Config *config,uint16_t offset, uint8_t control_register, uint8_t *data)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	4613      	mov	r3, r2
 80026fc:	727b      	strb	r3, [r7, #9]
	SPI_Config *w5500_spi = &config->SPI;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	617b      	str	r3, [r7, #20]
	SPI_NSS_Low(w5500_spi);
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7fe fcde 	bl	80010c4 <SPI_NSS_Low>
	SPI_TRX_Byte(w5500_spi, (0xFF00 & offset)>>8);
 8002708:	897b      	ldrh	r3, [r7, #10]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29b      	uxth	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7fe fc8e 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (0x00FF & offset)>>0);
 8002716:	897b      	ldrh	r3, [r7, #10]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	b29b      	uxth	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7fe fc87 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (control_register<<3|(0<<2)|(1<<0)));
 8002724:	7a7b      	ldrb	r3, [r7, #9]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	b21b      	sxth	r3, r3
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	b21b      	sxth	r3, r3
 8002730:	b29b      	uxth	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f7fe fc7c 	bl	8001032 <SPI_TRX_Byte>
	*data = SPI_TRX_Byte(w5500_spi, 0xAA);
 800273a:	21aa      	movs	r1, #170	; 0xaa
 800273c:	6978      	ldr	r0, [r7, #20]
 800273e:	f7fe fc78 	bl	8001032 <SPI_TRX_Byte>
 8002742:	4603      	mov	r3, r0
 8002744:	b2da      	uxtb	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	701a      	strb	r2, [r3, #0]
	SPI_NSS_High(w5500_spi);
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7fe fcaa 	bl	80010a4 <SPI_NSS_High>
}
 8002750:	bf00      	nop
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <Read_Multiple_Bytes>:
	*data4 = SPI_TRX_Byte(w5500_spi, 0x00);
	SPI_NSS_High(w5500_spi);
}

void Read_Multiple_Bytes(W5500_Config *config,uint16_t offset, uint8_t control_register, uint8_t *data, uint16_t length)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	4613      	mov	r3, r2
 8002768:	727b      	strb	r3, [r7, #9]
	SPI_Config *w5500_spi = &config->SPI;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	613b      	str	r3, [r7, #16]
	SPI_NSS_Low(w5500_spi);
 800276e:	6938      	ldr	r0, [r7, #16]
 8002770:	f7fe fca8 	bl	80010c4 <SPI_NSS_Low>
	SPI_TRX_Byte(w5500_spi, (0xFF00 & offset)>>8);
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	b29b      	uxth	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	6938      	ldr	r0, [r7, #16]
 800277e:	f7fe fc58 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (0x00FF & offset)>>0);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	6938      	ldr	r0, [r7, #16]
 800278c:	f7fe fc51 	bl	8001032 <SPI_TRX_Byte>
	SPI_TRX_Byte(w5500_spi, (control_register<<3|(0<<2)));
 8002790:	7a7b      	ldrb	r3, [r7, #9]
 8002792:	b29b      	uxth	r3, r3
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	b29b      	uxth	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	6938      	ldr	r0, [r7, #16]
 800279c:	f7fe fc49 	bl	8001032 <SPI_TRX_Byte>
	for(uint16_t i = 0; i < length; i++ )
 80027a0:	2300      	movs	r3, #0
 80027a2:	82fb      	strh	r3, [r7, #22]
 80027a4:	e00d      	b.n	80027c2 <Read_Multiple_Bytes+0x6a>
	{
		data[i] = SPI_TRX_Byte(w5500_spi, 0x00);
 80027a6:	2100      	movs	r1, #0
 80027a8:	6938      	ldr	r0, [r7, #16]
 80027aa:	f7fe fc42 	bl	8001032 <SPI_TRX_Byte>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4619      	mov	r1, r3
 80027b2:	8afb      	ldrh	r3, [r7, #22]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < length; i++ )
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	3301      	adds	r3, #1
 80027c0:	82fb      	strh	r3, [r7, #22]
 80027c2:	8afa      	ldrh	r2, [r7, #22]
 80027c4:	8c3b      	ldrh	r3, [r7, #32]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d3ed      	bcc.n	80027a6 <Read_Multiple_Bytes+0x4e>
	}
	SPI_NSS_High(w5500_spi);
 80027ca:	6938      	ldr	r0, [r7, #16]
 80027cc:	f7fe fc6a 	bl	80010a4 <SPI_NSS_High>

}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <Delay_ms>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80027e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800282c <Delay_ms+0x54>
 80027ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f2:	ee17 3a90 	vmov	r3, s15
 80027f6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <Delay_ms+0x58>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <Delay_ms+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <Delay_ms+0x58>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <Delay_ms+0x58>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002810:	bf00      	nop
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <Delay_ms+0x58>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f9      	beq.n	8002812 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	48241000 	.word	0x48241000
 8002830:	e000e010 	.word	0xe000e010

08002834 <W5500_UDP_Socket_Open>:
int counter_reset_udp = 0;
int counter_udp = 0;
int counter_overflow_udp = 1000;

int8_t W5500_UDP_Socket_Open(W5500_Config *config, W5500_Socket_Config *socket_config)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	counter_udp = counter_reset_udp;
 800283e:	4b36      	ldr	r3, [pc, #216]	; (8002918 <W5500_UDP_Socket_Open+0xe4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a36      	ldr	r2, [pc, #216]	; (800291c <W5500_UDP_Socket_Open+0xe8>)
 8002844:	6013      	str	r3, [r2, #0]

	uint8_t data[2];
	data[0] = config->Source_Port >> 8;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29b      	uxth	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	733b      	strb	r3, [r7, #12]
	data[1] = config->Source_Port;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002856:	b2db      	uxtb	r3, r3
 8002858:	737b      	strb	r3, [r7, #13]

	Write_1_Byte(config, W5500_Socket_Register.Sn_MR, W5500_Control_Register.Socket_0_Control, W5500_Socket_Mode.UDP);
 800285a:	2100      	movs	r1, #0
 800285c:	2201      	movs	r2, #1
 800285e:	2302      	movs	r3, #2
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fe40 	bl	80024e6 <Write_1_Byte>
	Write_2_Byte(config, W5500_Socket_Register.Sn_PORT_0, W5500_Control_Register.Socket_0_Control, &data[0]);
 8002866:	2104      	movs	r1, #4
 8002868:	2201      	movs	r2, #1
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fe71 	bl	8002556 <Write_2_Byte>

	Write_1_Byte(config, W5500_Socket_Register.Sn_MR, W5500_Control_Register.Socket_0_Control, W5500_Socket_Mode.UDP);
 8002874:	2100      	movs	r1, #0
 8002876:	2201      	movs	r2, #1
 8002878:	2302      	movs	r3, #2
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fe33 	bl	80024e6 <Write_1_Byte>
	while(counter_udp < counter_overflow_udp)
 8002880:	e01b      	b.n	80028ba <W5500_UDP_Socket_Open+0x86>
	{
		uint8_t socket_response = 0x01;
 8002882:	2301      	movs	r3, #1
 8002884:	72fb      	strb	r3, [r7, #11]

		Write_1_Byte(config, W5500_Socket_Register.Sn_CR, W5500_Control_Register.Socket_0_Control, 0x01);
 8002886:	2101      	movs	r1, #1
 8002888:	2201      	movs	r2, #1
 800288a:	2301      	movs	r3, #1
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe2a 	bl	80024e6 <Write_1_Byte>
		Read_1_Byte(config, W5500_Socket_Register.Sn_SR, W5500_Control_Register.Socket_0_Control, &socket_response);
 8002892:	2103      	movs	r1, #3
 8002894:	2201      	movs	r2, #1
 8002896:	f107 030b 	add.w	r3, r7, #11
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff26 	bl	80026ec <Read_1_Byte>
		if(socket_response == W5500_Socket_Status.SOCK_UDP)
 80028a0:	2222      	movs	r2, #34	; 0x22
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d00f      	beq.n	80028c8 <W5500_UDP_Socket_Open+0x94>
		{
			break;
		}
		counter_udp ++;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <W5500_UDP_Socket_Open+0xe8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <W5500_UDP_Socket_Open+0xe8>)
 80028b0:	6013      	str	r3, [r2, #0]
		Delay_ms(10);
 80028b2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80028b6:	f7ff ff8f 	bl	80027d8 <Delay_ms>
	while(counter_udp < counter_overflow_udp)
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <W5500_UDP_Socket_Open+0xe8>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <W5500_UDP_Socket_Open+0xec>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dbdd      	blt.n	8002882 <W5500_UDP_Socket_Open+0x4e>
 80028c6:	e000      	b.n	80028ca <W5500_UDP_Socket_Open+0x96>
			break;
 80028c8:	bf00      	nop
	}
	if(counter_udp >= counter_overflow_udp){
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <W5500_UDP_Socket_Open+0xe8>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <W5500_UDP_Socket_Open+0xec>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	db02      	blt.n	80028dc <W5500_UDP_Socket_Open+0xa8>
		return -1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e018      	b.n	800290e <W5500_UDP_Socket_Open+0xda>
	}

		// Set Destination IP
		Write_4_Byte(config, W5500_Socket_Register.Sn_DIPR0, W5500_Control_Register.Socket_0_Control, socket_config->Destination_IP_Address);
 80028dc:	210c      	movs	r1, #12
 80028de:	2201      	movs	r2, #1
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fe73 	bl	80025d0 <Write_4_Byte>
		// Set Destinaiton Port
		data[0] = socket_config->Destination_Port >> 8;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	899b      	ldrh	r3, [r3, #12]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	733b      	strb	r3, [r7, #12]
		data[1] = socket_config->Destination_Port;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	899b      	ldrh	r3, [r3, #12]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	737b      	strb	r3, [r7, #13]
		Write_2_Byte(config, W5500_Socket_Register.Sn_DPORT0, W5500_Control_Register.Socket_0_Control, &data[0]);
 80028fe:	2110      	movs	r1, #16
 8002900:	2201      	movs	r2, #1
 8002902:	f107 030c 	add.w	r3, r7, #12
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fe25 	bl	8002556 <Write_2_Byte>
		return 1;
 800290c:	2301      	movs	r3, #1

}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200000f0 	.word	0x200000f0
 800291c:	200000f4 	.word	0x200000f4
 8002920:	20000008 	.word	0x20000008

08002924 <W5500_UDP_Socket_Send_Packet>:

int8_t W5500_UDP_Socket_Send_Packet(W5500_Config *config, W5500_Socket_Config *socket_config)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af02      	add	r7, sp, #8
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	uint8_t FREE_SPACE_TX[2],data[2];
	uint16_t FREE_SPACE_TX_TOTAL;
	Read_1_Byte(config, W5500_Socket_Register.Sn_TX_FSR_0, W5500_Control_Register.Socket_0_Control, &FREE_SPACE_TX[0]);
 800292e:	2120      	movs	r1, #32
 8002930:	2201      	movs	r2, #1
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fed8 	bl	80026ec <Read_1_Byte>
	Read_1_Byte(config, W5500_Socket_Register.Sn_TX_FSR_1, W5500_Control_Register.Socket_0_Control, &FREE_SPACE_TX[1]);
 800293c:	2121      	movs	r1, #33	; 0x21
 800293e:	2201      	movs	r2, #1
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	3301      	adds	r3, #1
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fed0 	bl	80026ec <Read_1_Byte>
	FREE_SPACE_TX_TOTAL = (FREE_SPACE_TX[1] << 8) | (FREE_SPACE_TX[0] << 0);
 800294c:	7e7b      	ldrb	r3, [r7, #25]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b21a      	sxth	r2, r3
 8002952:	7e3b      	ldrb	r3, [r7, #24]
 8002954:	b21b      	sxth	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	b21b      	sxth	r3, r3
 800295a:	83fb      	strh	r3, [r7, #30]

	uint8_t TX_RD[2];
	uint16_t TX_RD_TOTAL;
	Read_1_Byte(config, W5500_Socket_Register.Sn_TX_RD_0, W5500_Control_Register.Socket_0_Control, &TX_RD[0]);
 800295c:	2122      	movs	r1, #34	; 0x22
 800295e:	2201      	movs	r2, #1
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fec1 	bl	80026ec <Read_1_Byte>
	Read_1_Byte(config, W5500_Socket_Register.Sn_TX_RD_1, W5500_Control_Register.Socket_0_Control, &TX_RD[1]);
 800296a:	2123      	movs	r1, #35	; 0x23
 800296c:	2201      	movs	r2, #1
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	3301      	adds	r3, #1
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff feb9 	bl	80026ec <Read_1_Byte>
	TX_RD_TOTAL = (TX_RD[1] << 8) | (TX_RD[0] << 0);
 800297a:	7c7b      	ldrb	r3, [r7, #17]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	b21a      	sxth	r2, r3
 8002980:	7c3b      	ldrb	r3, [r7, #16]
 8002982:	b21b      	sxth	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b21b      	sxth	r3, r3
 8002988:	83bb      	strh	r3, [r7, #28]

	uint8_t TX_WR[2];
	uint16_t TX_WR_TOTAL;
	Read_1_Byte(config, W5500_Socket_Register.Sn_TX_WR_0, W5500_Control_Register.Socket_0_Control, &TX_WR[0]);
 800298a:	2124      	movs	r1, #36	; 0x24
 800298c:	2201      	movs	r2, #1
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff feaa 	bl	80026ec <Read_1_Byte>
	Read_1_Byte(config, W5500_Socket_Register.Sn_TX_WR_1, W5500_Control_Register.Socket_0_Control, &TX_WR[1]);
 8002998:	2125      	movs	r1, #37	; 0x25
 800299a:	2201      	movs	r2, #1
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	3301      	adds	r3, #1
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fea2 	bl	80026ec <Read_1_Byte>
	TX_WR_TOTAL = (TX_WR[1] << 8) | (TX_WR[0] << 0);
 80029a8:	7b7b      	ldrb	r3, [r7, #13]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	7b3b      	ldrb	r3, [r7, #12]
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	837b      	strh	r3, [r7, #26]

	Write_1_Byte(config, W5500_Socket_Register.Sn_TX_WR_0, W5500_Control_Register.Socket_0_Control,socket_config->data_len >> 8);
 80029b8:	2124      	movs	r1, #36	; 0x24
 80029ba:	2201      	movs	r2, #1
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	8a9b      	ldrh	r3, [r3, #20]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fd8d 	bl	80024e6 <Write_1_Byte>
	Write_1_Byte(config, W5500_Socket_Register.Sn_TX_WR_1, W5500_Control_Register.Socket_0_Control, socket_config->data_len >> 0);
 80029cc:	2125      	movs	r1, #37	; 0x25
 80029ce:	2201      	movs	r2, #1
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	8a9b      	ldrh	r3, [r3, #20]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fd85 	bl	80024e6 <Write_1_Byte>
	Write_Multiple_Bytes(config, TX_WR_TOTAL, W5500_Control_Register.Socket_0_TX_Buffer, &socket_config->data[0], socket_config->data_len);
 80029dc:	2002      	movs	r0, #2
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	8a9b      	ldrh	r3, [r3, #20]
 80029e6:	8b79      	ldrh	r1, [r7, #26]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	4602      	mov	r2, r0
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fe3b 	bl	800266a <Write_Multiple_Bytes>

	data[0] = (TX_WR_TOTAL + socket_config->data_len) >> 8;
 80029f4:	8b7b      	ldrh	r3, [r7, #26]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	8a92      	ldrh	r2, [r2, #20]
 80029fa:	4413      	add	r3, r2
 80029fc:	121b      	asrs	r3, r3, #8
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	753b      	strb	r3, [r7, #20]
	data[1] = TX_WR_TOTAL + socket_config->data_len;
 8002a02:	8b7b      	ldrh	r3, [r7, #26]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	8a9b      	ldrh	r3, [r3, #20]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	757b      	strb	r3, [r7, #21]
	Write_2_Byte(config, W5500_Socket_Register.Sn_TX_WR_0, W5500_Control_Register.Socket_0_Control, &data[0]);
 8002a12:	2124      	movs	r1, #36	; 0x24
 8002a14:	2201      	movs	r2, #1
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fd9b 	bl	8002556 <Write_2_Byte>

	return 2;
 8002a20:	2302      	movs	r3, #2
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <W5500_UDP_Socket_Get_Packet>:

int8_t W5500_UDP_Socket_Get_Packet(W5500_Config *config, W5500_Socket_Config *socket_config, uint8_t *IP_Address[4], uint16_t *Port , uint8_t *Payload, uint8_t *Payload_Length)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8002a38:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8002a3c:	6020      	str	r0, [r4, #0]
 8002a3e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8002a42:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8002a46:	6001      	str	r1, [r0, #0]
 8002a48:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8002a4c:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8002a50:	600a      	str	r2, [r1, #0]
 8002a52:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002a56:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8002a5a:	6013      	str	r3, [r2, #0]
	uint8_t RX_RD[2];
	uint16_t RX_RD_TOTAL;
	Read_1_Byte(config, W5500_Socket_Register.Sn_RX_RD_0, W5500_Control_Register.Socket_0_Control, &RX_RD[0]);
 8002a5c:	2128      	movs	r1, #40	; 0x28
 8002a5e:	2401      	movs	r4, #1
 8002a60:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002a64:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002a68:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	6800      	ldr	r0, [r0, #0]
 8002a70:	f7ff fe3c 	bl	80026ec <Read_1_Byte>
	Read_1_Byte(config, W5500_Socket_Register.Sn_RX_RD_1, W5500_Control_Register.Socket_0_Control, &RX_RD[1]);
 8002a74:	2129      	movs	r1, #41	; 0x29
 8002a76:	2401      	movs	r4, #1
 8002a78:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002a82:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002a86:	4622      	mov	r2, r4
 8002a88:	6800      	ldr	r0, [r0, #0]
 8002a8a:	f7ff fe2f 	bl	80026ec <Read_1_Byte>
	RX_RD_TOTAL = (RX_RD[1] << 8) | (RX_RD[0] << 0);
 8002a8e:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8002a9a:	b21b      	sxth	r3, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e

	uint8_t RX_RS[2];
	uint16_t RX_RS_TOTAL;
	Read_1_Byte(config, W5500_Socket_Register.Sn_RX_RSR_0, W5500_Control_Register.Socket_0_Control, &RX_RS[0]);
 8002aa4:	2126      	movs	r1, #38	; 0x26
 8002aa6:	2401      	movs	r4, #1
 8002aa8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002aac:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002ab0:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	6800      	ldr	r0, [r0, #0]
 8002ab8:	f7ff fe18 	bl	80026ec <Read_1_Byte>
	Read_1_Byte(config, W5500_Socket_Register.Sn_RX_RSR_1, W5500_Control_Register.Socket_0_Control, &RX_RS[1]);
 8002abc:	2127      	movs	r1, #39	; 0x27
 8002abe:	2401      	movs	r4, #1
 8002ac0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002aca:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002ace:	4622      	mov	r2, r4
 8002ad0:	6800      	ldr	r0, [r0, #0]
 8002ad2:	f7ff fe0b 	bl	80026ec <Read_1_Byte>
	RX_RS_TOTAL = (RX_RS[1] << 8) | (RX_RS[0] << 0);
 8002ad6:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	b21a      	sxth	r2, r3
 8002ade:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c

	uint8_t RX_WR[2];
	uint16_t RX_WR_TOTAL;
	Read_1_Byte(config, W5500_Socket_Register.Sn_RX_WR_0, W5500_Control_Register.Socket_0_Control, &RX_WR[0]);
 8002aec:	212a      	movs	r1, #42	; 0x2a
 8002aee:	2401      	movs	r4, #1
 8002af0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002af4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002af8:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002afc:	4622      	mov	r2, r4
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	f7ff fdf4 	bl	80026ec <Read_1_Byte>
	Read_1_Byte(config, W5500_Socket_Register.Sn_RX_WR_1, W5500_Control_Register.Socket_0_Control, &RX_WR[1]);
 8002b04:	212b      	movs	r1, #43	; 0x2b
 8002b06:	2401      	movs	r4, #1
 8002b08:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002b12:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002b16:	4622      	mov	r2, r4
 8002b18:	6800      	ldr	r0, [r0, #0]
 8002b1a:	f7ff fde7 	bl	80026ec <Read_1_Byte>
	RX_WR_TOTAL = (RX_WR[1] << 8) | (RX_WR[0] << 0);
 8002b1e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a

	counter_udp = counter_reset_udp;
 8002b34:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <W5500_UDP_Socket_Get_Packet+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a68      	ldr	r2, [pc, #416]	; (8002cdc <W5500_UDP_Socket_Get_Packet+0x2b0>)
 8002b3a:	6013      	str	r3, [r2, #0]
	while(counter_udp < (counter_overflow_udp))
 8002b3c:	e031      	b.n	8002ba2 <W5500_UDP_Socket_Get_Packet+0x176>
	{
		uint8_t RX_WR[2];
		uint16_t RX_WR_TOTAL;
		Read_1_Byte(config, W5500_Socket_Register.Sn_RX_WR_0, W5500_Control_Register.Socket_0_Control, &RX_WR[0]);
 8002b3e:	212a      	movs	r1, #42	; 0x2a
 8002b40:	2401      	movs	r4, #1
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002b4a:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002b4e:	4622      	mov	r2, r4
 8002b50:	6800      	ldr	r0, [r0, #0]
 8002b52:	f7ff fdcb 	bl	80026ec <Read_1_Byte>
		Read_1_Byte(config, W5500_Socket_Register.Sn_RX_WR_1, W5500_Control_Register.Socket_0_Control, &RX_WR[1]);
 8002b56:	212b      	movs	r1, #43	; 0x2b
 8002b58:	2401      	movs	r4, #1
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002b64:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002b68:	4622      	mov	r2, r4
 8002b6a:	6800      	ldr	r0, [r0, #0]
 8002b6c:	f7ff fdbe 	bl	80026ec <Read_1_Byte>
		RX_WR_TOTAL = (RX_WR[1] << 8) | (RX_WR[0] << 0);
 8002b70:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b74:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002b78:	785b      	ldrb	r3, [r3, #1]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002b82:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	f8a7 3218 	strh.w	r3, [r7, #536]	; 0x218
		if(RX_WR_TOTAL > 0x00)
 8002b92:	f8b7 3218 	ldrh.w	r3, [r7, #536]	; 0x218
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <W5500_UDP_Socket_Get_Packet+0x184>
		{
			break;
		}
		Delay_ms(10);
 8002b9a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002b9e:	f7ff fe1b 	bl	80027d8 <Delay_ms>
	while(counter_udp < (counter_overflow_udp))
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	; (8002cdc <W5500_UDP_Socket_Get_Packet+0x2b0>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <W5500_UDP_Socket_Get_Packet+0x2b4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	dbc7      	blt.n	8002b3e <W5500_UDP_Socket_Get_Packet+0x112>
 8002bae:	e000      	b.n	8002bb2 <W5500_UDP_Socket_Get_Packet+0x186>
			break;
 8002bb0:	bf00      	nop
	}
	if(counter_udp >= counter_overflow_udp) return -3;
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <W5500_UDP_Socket_Get_Packet+0x2b0>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <W5500_UDP_Socket_Get_Packet+0x2b4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	db02      	blt.n	8002bc4 <W5500_UDP_Socket_Get_Packet+0x198>
 8002bbe:	f06f 0302 	mvn.w	r3, #2
 8002bc2:	e084      	b.n	8002cce <W5500_UDP_Socket_Get_Packet+0x2a2>

	uint8_t rdata[500];
	Read_Multiple_Bytes(config, RX_RD_TOTAL, W5500_Control_Register.Socket_0_RX_Buffer, &rdata[0], 500);
 8002bc4:	2403      	movs	r4, #3
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	f8b7 121e 	ldrh.w	r1, [r7, #542]	; 0x21e
 8002bce:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002bd2:	f5a2 7007 	sub.w	r0, r2, #540	; 0x21c
 8002bd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002bda:	9200      	str	r2, [sp, #0]
 8002bdc:	4622      	mov	r2, r4
 8002bde:	6800      	ldr	r0, [r0, #0]
 8002be0:	f7ff fdba 	bl	8002758 <Read_Multiple_Bytes>


	for(int i = 0; i < 4; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002bea:	e017      	b.n	8002c1c <W5500_UDP_Socket_Get_Packet+0x1f0>
	{
		*IP_Address[i] = rdata[i];
 8002bec:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002bf6:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002c04:	f5a2 7104 	sub.w	r1, r2, #528	; 0x210
 8002c08:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002c0c:	440a      	add	r2, r1
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++)
 8002c12:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c16:	3301      	adds	r3, #1
 8002c18:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002c1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	dde3      	ble.n	8002bec <W5500_UDP_Socket_Get_Packet+0x1c0>
	}

	*Port = (rdata[4] << 8) | rdata[5];
 8002c24:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c28:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002c2c:	791b      	ldrb	r3, [r3, #4]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	b21a      	sxth	r2, r3
 8002c32:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c36:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002c3a:	795b      	ldrb	r3, [r3, #5]
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c48:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	801a      	strh	r2, [r3, #0]

	*Payload_Length = (rdata[6] << 8) | rdata[7];
 8002c50:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c54:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002c58:	799b      	ldrb	r3, [r3, #6]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	b25a      	sxtb	r2, r3
 8002c5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002c62:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002c66:	79db      	ldrb	r3, [r3, #7]
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002c74:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < *Payload_Length; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002c7c:	e013      	b.n	8002ca6 <W5500_UDP_Socket_Get_Packet+0x27a>
	{
		Payload[i] = rdata[8+i];
 8002c7e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002c82:	f103 0208 	add.w	r2, r3, #8
 8002c86:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002c8a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8002c8e:	440b      	add	r3, r1
 8002c90:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8002c94:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8002c98:	5c8a      	ldrb	r2, [r1, r2]
 8002c9a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < *Payload_Length; i++)
 8002c9c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002ca6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	dbe3      	blt.n	8002c7e <W5500_UDP_Socket_Get_Packet+0x252>
	}

//	Read_Buffer(config, 0x0000, socket_config->data[0], 100);
	Write_1_Byte(config, W5500_Socket_Register.Sn_CR, W5500_Control_Register.Socket_0_Control, W5500_Socket_Commands.RECV);
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2440      	movs	r4, #64	; 0x40
 8002cbc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002cc0:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	6800      	ldr	r0, [r0, #0]
 8002cc8:	f7ff fc0d 	bl	80024e6 <Write_1_Byte>
	return 3;
 8002ccc:	2303      	movs	r3, #3
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	200000f0 	.word	0x200000f0
 8002cdc:	200000f4 	.word	0x200000f4
 8002ce0:	20000008 	.word	0x20000008

08002ce4 <W5500_UDP_Socket_Close>:

int8_t W5500_UDP_Socket_Close(W5500_Config *config, W5500_Socket_Config *socket_config)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
	// Close Socket
	counter_udp = counter_reset_udp;
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <W5500_UDP_Socket_Close+0x78>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <W5500_UDP_Socket_Close+0x7c>)
 8002cf4:	6013      	str	r3, [r2, #0]
	Write_1_Byte(config, W5500_Socket_Register.Sn_CR, W5500_Control_Register.Socket_0_Control, W5500_Socket_Commands.CLOSE);
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fbf2 	bl	80024e6 <Write_1_Byte>
	while(counter_udp < counter_overflow_udp)
 8002d02:	e015      	b.n	8002d30 <W5500_UDP_Socket_Close+0x4c>
	{
		uint8_t socket_response = 0x01;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
		Read_1_Byte(config, W5500_Socket_Register.Sn_SR, W5500_Control_Register.Socket_0_Control, &socket_response);
 8002d08:	2103      	movs	r1, #3
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f107 030f 	add.w	r3, r7, #15
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fceb 	bl	80026ec <Read_1_Byte>
		if(socket_response == W5500_Socket_Status.SOCK_CLOSED)
 8002d16:	2200      	movs	r2, #0
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d00f      	beq.n	8002d3e <W5500_UDP_Socket_Close+0x5a>
		{
			break;
		}
		counter_udp ++;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <W5500_UDP_Socket_Close+0x7c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <W5500_UDP_Socket_Close+0x7c>)
 8002d26:	6013      	str	r3, [r2, #0]
		Delay_ms(10);
 8002d28:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002d2c:	f7ff fd54 	bl	80027d8 <Delay_ms>
	while(counter_udp < counter_overflow_udp)
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <W5500_UDP_Socket_Close+0x7c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <W5500_UDP_Socket_Close+0x80>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dbe3      	blt.n	8002d04 <W5500_UDP_Socket_Close+0x20>
 8002d3c:	e000      	b.n	8002d40 <W5500_UDP_Socket_Close+0x5c>
			break;
 8002d3e:	bf00      	nop
	}
	if(counter_udp >= counter_overflow_udp) {
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <W5500_UDP_Socket_Close+0x7c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <W5500_UDP_Socket_Close+0x80>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	db02      	blt.n	8002d52 <W5500_UDP_Socket_Close+0x6e>
		return -3;
 8002d4c:	f06f 0302 	mvn.w	r3, #2
 8002d50:	e000      	b.n	8002d54 <W5500_UDP_Socket_Close+0x70>
	}
		return 3;
 8002d52:	2303      	movs	r3, #3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200000f0 	.word	0x200000f0
 8002d60:	200000f4 	.word	0x200000f4
 8002d64:	20000008 	.word	0x20000008

08002d68 <_vsiprintf_r>:
 8002d68:	b500      	push	{lr}
 8002d6a:	b09b      	sub	sp, #108	; 0x6c
 8002d6c:	9100      	str	r1, [sp, #0]
 8002d6e:	9104      	str	r1, [sp, #16]
 8002d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d74:	9105      	str	r1, [sp, #20]
 8002d76:	9102      	str	r1, [sp, #8]
 8002d78:	4905      	ldr	r1, [pc, #20]	; (8002d90 <_vsiprintf_r+0x28>)
 8002d7a:	9103      	str	r1, [sp, #12]
 8002d7c:	4669      	mov	r1, sp
 8002d7e:	f000 f991 	bl	80030a4 <_svfiprintf_r>
 8002d82:	9b00      	ldr	r3, [sp, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	b01b      	add	sp, #108	; 0x6c
 8002d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d8e:	bf00      	nop
 8002d90:	ffff0208 	.word	0xffff0208

08002d94 <vsiprintf>:
 8002d94:	4613      	mov	r3, r2
 8002d96:	460a      	mov	r2, r1
 8002d98:	4601      	mov	r1, r0
 8002d9a:	4802      	ldr	r0, [pc, #8]	; (8002da4 <vsiprintf+0x10>)
 8002d9c:	6800      	ldr	r0, [r0, #0]
 8002d9e:	f7ff bfe3 	b.w	8002d68 <_vsiprintf_r>
 8002da2:	bf00      	nop
 8002da4:	20000058 	.word	0x20000058

08002da8 <__errno>:
 8002da8:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <__errno+0x8>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000058 	.word	0x20000058

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4d0d      	ldr	r5, [pc, #52]	; (8002dec <__libc_init_array+0x38>)
 8002db8:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	4d0b      	ldr	r5, [pc, #44]	; (8002df4 <__libc_init_array+0x40>)
 8002dc6:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x44>)
 8002dc8:	f000 fc6a 	bl	80036a0 <_init>
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08003714 	.word	0x08003714
 8002df0:	08003714 	.word	0x08003714
 8002df4:	08003714 	.word	0x08003714
 8002df8:	08003718 	.word	0x08003718

08002dfc <__retarget_lock_acquire_recursive>:
 8002dfc:	4770      	bx	lr

08002dfe <__retarget_lock_release_recursive>:
 8002dfe:	4770      	bx	lr

08002e00 <_free_r>:
 8002e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e02:	2900      	cmp	r1, #0
 8002e04:	d044      	beq.n	8002e90 <_free_r+0x90>
 8002e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e0a:	9001      	str	r0, [sp, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8002e12:	bfb8      	it	lt
 8002e14:	18e4      	addlt	r4, r4, r3
 8002e16:	f000 f8df 	bl	8002fd8 <__malloc_lock>
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <_free_r+0x94>)
 8002e1c:	9801      	ldr	r0, [sp, #4]
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	b933      	cbnz	r3, 8002e30 <_free_r+0x30>
 8002e22:	6063      	str	r3, [r4, #4]
 8002e24:	6014      	str	r4, [r2, #0]
 8002e26:	b003      	add	sp, #12
 8002e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e2c:	f000 b8da 	b.w	8002fe4 <__malloc_unlock>
 8002e30:	42a3      	cmp	r3, r4
 8002e32:	d908      	bls.n	8002e46 <_free_r+0x46>
 8002e34:	6825      	ldr	r5, [r4, #0]
 8002e36:	1961      	adds	r1, r4, r5
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	bf01      	itttt	eq
 8002e3c:	6819      	ldreq	r1, [r3, #0]
 8002e3e:	685b      	ldreq	r3, [r3, #4]
 8002e40:	1949      	addeq	r1, r1, r5
 8002e42:	6021      	streq	r1, [r4, #0]
 8002e44:	e7ed      	b.n	8002e22 <_free_r+0x22>
 8002e46:	461a      	mov	r2, r3
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	b10b      	cbz	r3, 8002e50 <_free_r+0x50>
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	d9fa      	bls.n	8002e46 <_free_r+0x46>
 8002e50:	6811      	ldr	r1, [r2, #0]
 8002e52:	1855      	adds	r5, r2, r1
 8002e54:	42a5      	cmp	r5, r4
 8002e56:	d10b      	bne.n	8002e70 <_free_r+0x70>
 8002e58:	6824      	ldr	r4, [r4, #0]
 8002e5a:	4421      	add	r1, r4
 8002e5c:	1854      	adds	r4, r2, r1
 8002e5e:	42a3      	cmp	r3, r4
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	d1e0      	bne.n	8002e26 <_free_r+0x26>
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	6053      	str	r3, [r2, #4]
 8002e6a:	440c      	add	r4, r1
 8002e6c:	6014      	str	r4, [r2, #0]
 8002e6e:	e7da      	b.n	8002e26 <_free_r+0x26>
 8002e70:	d902      	bls.n	8002e78 <_free_r+0x78>
 8002e72:	230c      	movs	r3, #12
 8002e74:	6003      	str	r3, [r0, #0]
 8002e76:	e7d6      	b.n	8002e26 <_free_r+0x26>
 8002e78:	6825      	ldr	r5, [r4, #0]
 8002e7a:	1961      	adds	r1, r4, r5
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	bf04      	itt	eq
 8002e80:	6819      	ldreq	r1, [r3, #0]
 8002e82:	685b      	ldreq	r3, [r3, #4]
 8002e84:	6063      	str	r3, [r4, #4]
 8002e86:	bf04      	itt	eq
 8002e88:	1949      	addeq	r1, r1, r5
 8002e8a:	6021      	streq	r1, [r4, #0]
 8002e8c:	6054      	str	r4, [r2, #4]
 8002e8e:	e7ca      	b.n	8002e26 <_free_r+0x26>
 8002e90:	b003      	add	sp, #12
 8002e92:	bd30      	pop	{r4, r5, pc}
 8002e94:	20000238 	.word	0x20000238

08002e98 <sbrk_aligned>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	4e0e      	ldr	r6, [pc, #56]	; (8002ed4 <sbrk_aligned+0x3c>)
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	6831      	ldr	r1, [r6, #0]
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	b911      	cbnz	r1, 8002eaa <sbrk_aligned+0x12>
 8002ea4:	f000 fba6 	bl	80035f4 <_sbrk_r>
 8002ea8:	6030      	str	r0, [r6, #0]
 8002eaa:	4621      	mov	r1, r4
 8002eac:	4628      	mov	r0, r5
 8002eae:	f000 fba1 	bl	80035f4 <_sbrk_r>
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	d00a      	beq.n	8002ecc <sbrk_aligned+0x34>
 8002eb6:	1cc4      	adds	r4, r0, #3
 8002eb8:	f024 0403 	bic.w	r4, r4, #3
 8002ebc:	42a0      	cmp	r0, r4
 8002ebe:	d007      	beq.n	8002ed0 <sbrk_aligned+0x38>
 8002ec0:	1a21      	subs	r1, r4, r0
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 fb96 	bl	80035f4 <_sbrk_r>
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d101      	bne.n	8002ed0 <sbrk_aligned+0x38>
 8002ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	2000023c 	.word	0x2000023c

08002ed8 <_malloc_r>:
 8002ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002edc:	1ccd      	adds	r5, r1, #3
 8002ede:	f025 0503 	bic.w	r5, r5, #3
 8002ee2:	3508      	adds	r5, #8
 8002ee4:	2d0c      	cmp	r5, #12
 8002ee6:	bf38      	it	cc
 8002ee8:	250c      	movcc	r5, #12
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	4607      	mov	r7, r0
 8002eee:	db01      	blt.n	8002ef4 <_malloc_r+0x1c>
 8002ef0:	42a9      	cmp	r1, r5
 8002ef2:	d905      	bls.n	8002f00 <_malloc_r+0x28>
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	2600      	movs	r6, #0
 8002efa:	4630      	mov	r0, r6
 8002efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fd4 <_malloc_r+0xfc>
 8002f04:	f000 f868 	bl	8002fd8 <__malloc_lock>
 8002f08:	f8d8 3000 	ldr.w	r3, [r8]
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	bb5c      	cbnz	r4, 8002f68 <_malloc_r+0x90>
 8002f10:	4629      	mov	r1, r5
 8002f12:	4638      	mov	r0, r7
 8002f14:	f7ff ffc0 	bl	8002e98 <sbrk_aligned>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	d155      	bne.n	8002fca <_malloc_r+0xf2>
 8002f1e:	f8d8 4000 	ldr.w	r4, [r8]
 8002f22:	4626      	mov	r6, r4
 8002f24:	2e00      	cmp	r6, #0
 8002f26:	d145      	bne.n	8002fb4 <_malloc_r+0xdc>
 8002f28:	2c00      	cmp	r4, #0
 8002f2a:	d048      	beq.n	8002fbe <_malloc_r+0xe6>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	4631      	mov	r1, r6
 8002f30:	4638      	mov	r0, r7
 8002f32:	eb04 0903 	add.w	r9, r4, r3
 8002f36:	f000 fb5d 	bl	80035f4 <_sbrk_r>
 8002f3a:	4581      	cmp	r9, r0
 8002f3c:	d13f      	bne.n	8002fbe <_malloc_r+0xe6>
 8002f3e:	6821      	ldr	r1, [r4, #0]
 8002f40:	1a6d      	subs	r5, r5, r1
 8002f42:	4629      	mov	r1, r5
 8002f44:	4638      	mov	r0, r7
 8002f46:	f7ff ffa7 	bl	8002e98 <sbrk_aligned>
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d037      	beq.n	8002fbe <_malloc_r+0xe6>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	442b      	add	r3, r5
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	f8d8 3000 	ldr.w	r3, [r8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d038      	beq.n	8002fce <_malloc_r+0xf6>
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	42a2      	cmp	r2, r4
 8002f60:	d12b      	bne.n	8002fba <_malloc_r+0xe2>
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	e00f      	b.n	8002f88 <_malloc_r+0xb0>
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	1b52      	subs	r2, r2, r5
 8002f6c:	d41f      	bmi.n	8002fae <_malloc_r+0xd6>
 8002f6e:	2a0b      	cmp	r2, #11
 8002f70:	d917      	bls.n	8002fa2 <_malloc_r+0xca>
 8002f72:	1961      	adds	r1, r4, r5
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	6025      	str	r5, [r4, #0]
 8002f78:	bf18      	it	ne
 8002f7a:	6059      	strne	r1, [r3, #4]
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	bf08      	it	eq
 8002f80:	f8c8 1000 	streq.w	r1, [r8]
 8002f84:	5162      	str	r2, [r4, r5]
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	4638      	mov	r0, r7
 8002f8a:	f104 060b 	add.w	r6, r4, #11
 8002f8e:	f000 f829 	bl	8002fe4 <__malloc_unlock>
 8002f92:	f026 0607 	bic.w	r6, r6, #7
 8002f96:	1d23      	adds	r3, r4, #4
 8002f98:	1af2      	subs	r2, r6, r3
 8002f9a:	d0ae      	beq.n	8002efa <_malloc_r+0x22>
 8002f9c:	1b9b      	subs	r3, r3, r6
 8002f9e:	50a3      	str	r3, [r4, r2]
 8002fa0:	e7ab      	b.n	8002efa <_malloc_r+0x22>
 8002fa2:	42a3      	cmp	r3, r4
 8002fa4:	6862      	ldr	r2, [r4, #4]
 8002fa6:	d1dd      	bne.n	8002f64 <_malloc_r+0x8c>
 8002fa8:	f8c8 2000 	str.w	r2, [r8]
 8002fac:	e7ec      	b.n	8002f88 <_malloc_r+0xb0>
 8002fae:	4623      	mov	r3, r4
 8002fb0:	6864      	ldr	r4, [r4, #4]
 8002fb2:	e7ac      	b.n	8002f0e <_malloc_r+0x36>
 8002fb4:	4634      	mov	r4, r6
 8002fb6:	6876      	ldr	r6, [r6, #4]
 8002fb8:	e7b4      	b.n	8002f24 <_malloc_r+0x4c>
 8002fba:	4613      	mov	r3, r2
 8002fbc:	e7cc      	b.n	8002f58 <_malloc_r+0x80>
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f000 f80e 	bl	8002fe4 <__malloc_unlock>
 8002fc8:	e797      	b.n	8002efa <_malloc_r+0x22>
 8002fca:	6025      	str	r5, [r4, #0]
 8002fcc:	e7dc      	b.n	8002f88 <_malloc_r+0xb0>
 8002fce:	605b      	str	r3, [r3, #4]
 8002fd0:	deff      	udf	#255	; 0xff
 8002fd2:	bf00      	nop
 8002fd4:	20000238 	.word	0x20000238

08002fd8 <__malloc_lock>:
 8002fd8:	4801      	ldr	r0, [pc, #4]	; (8002fe0 <__malloc_lock+0x8>)
 8002fda:	f7ff bf0f 	b.w	8002dfc <__retarget_lock_acquire_recursive>
 8002fde:	bf00      	nop
 8002fe0:	20000234 	.word	0x20000234

08002fe4 <__malloc_unlock>:
 8002fe4:	4801      	ldr	r0, [pc, #4]	; (8002fec <__malloc_unlock+0x8>)
 8002fe6:	f7ff bf0a 	b.w	8002dfe <__retarget_lock_release_recursive>
 8002fea:	bf00      	nop
 8002fec:	20000234 	.word	0x20000234

08002ff0 <__ssputs_r>:
 8002ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff4:	688e      	ldr	r6, [r1, #8]
 8002ff6:	461f      	mov	r7, r3
 8002ff8:	42be      	cmp	r6, r7
 8002ffa:	680b      	ldr	r3, [r1, #0]
 8002ffc:	4682      	mov	sl, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	4690      	mov	r8, r2
 8003002:	d82c      	bhi.n	800305e <__ssputs_r+0x6e>
 8003004:	898a      	ldrh	r2, [r1, #12]
 8003006:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800300a:	d026      	beq.n	800305a <__ssputs_r+0x6a>
 800300c:	6965      	ldr	r5, [r4, #20]
 800300e:	6909      	ldr	r1, [r1, #16]
 8003010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003014:	eba3 0901 	sub.w	r9, r3, r1
 8003018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800301c:	1c7b      	adds	r3, r7, #1
 800301e:	444b      	add	r3, r9
 8003020:	106d      	asrs	r5, r5, #1
 8003022:	429d      	cmp	r5, r3
 8003024:	bf38      	it	cc
 8003026:	461d      	movcc	r5, r3
 8003028:	0553      	lsls	r3, r2, #21
 800302a:	d527      	bpl.n	800307c <__ssputs_r+0x8c>
 800302c:	4629      	mov	r1, r5
 800302e:	f7ff ff53 	bl	8002ed8 <_malloc_r>
 8003032:	4606      	mov	r6, r0
 8003034:	b360      	cbz	r0, 8003090 <__ssputs_r+0xa0>
 8003036:	6921      	ldr	r1, [r4, #16]
 8003038:	464a      	mov	r2, r9
 800303a:	f000 faeb 	bl	8003614 <memcpy>
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003048:	81a3      	strh	r3, [r4, #12]
 800304a:	6126      	str	r6, [r4, #16]
 800304c:	6165      	str	r5, [r4, #20]
 800304e:	444e      	add	r6, r9
 8003050:	eba5 0509 	sub.w	r5, r5, r9
 8003054:	6026      	str	r6, [r4, #0]
 8003056:	60a5      	str	r5, [r4, #8]
 8003058:	463e      	mov	r6, r7
 800305a:	42be      	cmp	r6, r7
 800305c:	d900      	bls.n	8003060 <__ssputs_r+0x70>
 800305e:	463e      	mov	r6, r7
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	4632      	mov	r2, r6
 8003064:	4641      	mov	r1, r8
 8003066:	f000 faab 	bl	80035c0 <memmove>
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	1b9b      	subs	r3, r3, r6
 800306e:	60a3      	str	r3, [r4, #8]
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	4433      	add	r3, r6
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	2000      	movs	r0, #0
 8003078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307c:	462a      	mov	r2, r5
 800307e:	f000 fad7 	bl	8003630 <_realloc_r>
 8003082:	4606      	mov	r6, r0
 8003084:	2800      	cmp	r0, #0
 8003086:	d1e0      	bne.n	800304a <__ssputs_r+0x5a>
 8003088:	6921      	ldr	r1, [r4, #16]
 800308a:	4650      	mov	r0, sl
 800308c:	f7ff feb8 	bl	8002e00 <_free_r>
 8003090:	230c      	movs	r3, #12
 8003092:	f8ca 3000 	str.w	r3, [sl]
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	f04f 30ff 	mov.w	r0, #4294967295
 80030a2:	e7e9      	b.n	8003078 <__ssputs_r+0x88>

080030a4 <_svfiprintf_r>:
 80030a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a8:	4698      	mov	r8, r3
 80030aa:	898b      	ldrh	r3, [r1, #12]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	b09d      	sub	sp, #116	; 0x74
 80030b0:	4607      	mov	r7, r0
 80030b2:	460d      	mov	r5, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	d50e      	bpl.n	80030d6 <_svfiprintf_r+0x32>
 80030b8:	690b      	ldr	r3, [r1, #16]
 80030ba:	b963      	cbnz	r3, 80030d6 <_svfiprintf_r+0x32>
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	f7ff ff0b 	bl	8002ed8 <_malloc_r>
 80030c2:	6028      	str	r0, [r5, #0]
 80030c4:	6128      	str	r0, [r5, #16]
 80030c6:	b920      	cbnz	r0, 80030d2 <_svfiprintf_r+0x2e>
 80030c8:	230c      	movs	r3, #12
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	e0d0      	b.n	8003274 <_svfiprintf_r+0x1d0>
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	616b      	str	r3, [r5, #20]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9309      	str	r3, [sp, #36]	; 0x24
 80030da:	2320      	movs	r3, #32
 80030dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80030e4:	2330      	movs	r3, #48	; 0x30
 80030e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800328c <_svfiprintf_r+0x1e8>
 80030ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030ee:	f04f 0901 	mov.w	r9, #1
 80030f2:	4623      	mov	r3, r4
 80030f4:	469a      	mov	sl, r3
 80030f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030fa:	b10a      	cbz	r2, 8003100 <_svfiprintf_r+0x5c>
 80030fc:	2a25      	cmp	r2, #37	; 0x25
 80030fe:	d1f9      	bne.n	80030f4 <_svfiprintf_r+0x50>
 8003100:	ebba 0b04 	subs.w	fp, sl, r4
 8003104:	d00b      	beq.n	800311e <_svfiprintf_r+0x7a>
 8003106:	465b      	mov	r3, fp
 8003108:	4622      	mov	r2, r4
 800310a:	4629      	mov	r1, r5
 800310c:	4638      	mov	r0, r7
 800310e:	f7ff ff6f 	bl	8002ff0 <__ssputs_r>
 8003112:	3001      	adds	r0, #1
 8003114:	f000 80a9 	beq.w	800326a <_svfiprintf_r+0x1c6>
 8003118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800311a:	445a      	add	r2, fp
 800311c:	9209      	str	r2, [sp, #36]	; 0x24
 800311e:	f89a 3000 	ldrb.w	r3, [sl]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80a1 	beq.w	800326a <_svfiprintf_r+0x1c6>
 8003128:	2300      	movs	r3, #0
 800312a:	f04f 32ff 	mov.w	r2, #4294967295
 800312e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003132:	f10a 0a01 	add.w	sl, sl, #1
 8003136:	9304      	str	r3, [sp, #16]
 8003138:	9307      	str	r3, [sp, #28]
 800313a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800313e:	931a      	str	r3, [sp, #104]	; 0x68
 8003140:	4654      	mov	r4, sl
 8003142:	2205      	movs	r2, #5
 8003144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003148:	4850      	ldr	r0, [pc, #320]	; (800328c <_svfiprintf_r+0x1e8>)
 800314a:	f7fd f859 	bl	8000200 <memchr>
 800314e:	9a04      	ldr	r2, [sp, #16]
 8003150:	b9d8      	cbnz	r0, 800318a <_svfiprintf_r+0xe6>
 8003152:	06d0      	lsls	r0, r2, #27
 8003154:	bf44      	itt	mi
 8003156:	2320      	movmi	r3, #32
 8003158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800315c:	0711      	lsls	r1, r2, #28
 800315e:	bf44      	itt	mi
 8003160:	232b      	movmi	r3, #43	; 0x2b
 8003162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003166:	f89a 3000 	ldrb.w	r3, [sl]
 800316a:	2b2a      	cmp	r3, #42	; 0x2a
 800316c:	d015      	beq.n	800319a <_svfiprintf_r+0xf6>
 800316e:	9a07      	ldr	r2, [sp, #28]
 8003170:	4654      	mov	r4, sl
 8003172:	2000      	movs	r0, #0
 8003174:	f04f 0c0a 	mov.w	ip, #10
 8003178:	4621      	mov	r1, r4
 800317a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800317e:	3b30      	subs	r3, #48	; 0x30
 8003180:	2b09      	cmp	r3, #9
 8003182:	d94d      	bls.n	8003220 <_svfiprintf_r+0x17c>
 8003184:	b1b0      	cbz	r0, 80031b4 <_svfiprintf_r+0x110>
 8003186:	9207      	str	r2, [sp, #28]
 8003188:	e014      	b.n	80031b4 <_svfiprintf_r+0x110>
 800318a:	eba0 0308 	sub.w	r3, r0, r8
 800318e:	fa09 f303 	lsl.w	r3, r9, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	9304      	str	r3, [sp, #16]
 8003196:	46a2      	mov	sl, r4
 8003198:	e7d2      	b.n	8003140 <_svfiprintf_r+0x9c>
 800319a:	9b03      	ldr	r3, [sp, #12]
 800319c:	1d19      	adds	r1, r3, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	9103      	str	r1, [sp, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfbb      	ittet	lt
 80031a6:	425b      	neglt	r3, r3
 80031a8:	f042 0202 	orrlt.w	r2, r2, #2
 80031ac:	9307      	strge	r3, [sp, #28]
 80031ae:	9307      	strlt	r3, [sp, #28]
 80031b0:	bfb8      	it	lt
 80031b2:	9204      	strlt	r2, [sp, #16]
 80031b4:	7823      	ldrb	r3, [r4, #0]
 80031b6:	2b2e      	cmp	r3, #46	; 0x2e
 80031b8:	d10c      	bne.n	80031d4 <_svfiprintf_r+0x130>
 80031ba:	7863      	ldrb	r3, [r4, #1]
 80031bc:	2b2a      	cmp	r3, #42	; 0x2a
 80031be:	d134      	bne.n	800322a <_svfiprintf_r+0x186>
 80031c0:	9b03      	ldr	r3, [sp, #12]
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	9203      	str	r2, [sp, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bfb8      	it	lt
 80031cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80031d0:	3402      	adds	r4, #2
 80031d2:	9305      	str	r3, [sp, #20]
 80031d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800329c <_svfiprintf_r+0x1f8>
 80031d8:	7821      	ldrb	r1, [r4, #0]
 80031da:	2203      	movs	r2, #3
 80031dc:	4650      	mov	r0, sl
 80031de:	f7fd f80f 	bl	8000200 <memchr>
 80031e2:	b138      	cbz	r0, 80031f4 <_svfiprintf_r+0x150>
 80031e4:	9b04      	ldr	r3, [sp, #16]
 80031e6:	eba0 000a 	sub.w	r0, r0, sl
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	4082      	lsls	r2, r0
 80031ee:	4313      	orrs	r3, r2
 80031f0:	3401      	adds	r4, #1
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f8:	4825      	ldr	r0, [pc, #148]	; (8003290 <_svfiprintf_r+0x1ec>)
 80031fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031fe:	2206      	movs	r2, #6
 8003200:	f7fc fffe 	bl	8000200 <memchr>
 8003204:	2800      	cmp	r0, #0
 8003206:	d038      	beq.n	800327a <_svfiprintf_r+0x1d6>
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <_svfiprintf_r+0x1f0>)
 800320a:	bb1b      	cbnz	r3, 8003254 <_svfiprintf_r+0x1b0>
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	3307      	adds	r3, #7
 8003210:	f023 0307 	bic.w	r3, r3, #7
 8003214:	3308      	adds	r3, #8
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800321a:	4433      	add	r3, r6
 800321c:	9309      	str	r3, [sp, #36]	; 0x24
 800321e:	e768      	b.n	80030f2 <_svfiprintf_r+0x4e>
 8003220:	fb0c 3202 	mla	r2, ip, r2, r3
 8003224:	460c      	mov	r4, r1
 8003226:	2001      	movs	r0, #1
 8003228:	e7a6      	b.n	8003178 <_svfiprintf_r+0xd4>
 800322a:	2300      	movs	r3, #0
 800322c:	3401      	adds	r4, #1
 800322e:	9305      	str	r3, [sp, #20]
 8003230:	4619      	mov	r1, r3
 8003232:	f04f 0c0a 	mov.w	ip, #10
 8003236:	4620      	mov	r0, r4
 8003238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800323c:	3a30      	subs	r2, #48	; 0x30
 800323e:	2a09      	cmp	r2, #9
 8003240:	d903      	bls.n	800324a <_svfiprintf_r+0x1a6>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0c6      	beq.n	80031d4 <_svfiprintf_r+0x130>
 8003246:	9105      	str	r1, [sp, #20]
 8003248:	e7c4      	b.n	80031d4 <_svfiprintf_r+0x130>
 800324a:	fb0c 2101 	mla	r1, ip, r1, r2
 800324e:	4604      	mov	r4, r0
 8003250:	2301      	movs	r3, #1
 8003252:	e7f0      	b.n	8003236 <_svfiprintf_r+0x192>
 8003254:	ab03      	add	r3, sp, #12
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	462a      	mov	r2, r5
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <_svfiprintf_r+0x1f4>)
 800325c:	a904      	add	r1, sp, #16
 800325e:	4638      	mov	r0, r7
 8003260:	f3af 8000 	nop.w
 8003264:	1c42      	adds	r2, r0, #1
 8003266:	4606      	mov	r6, r0
 8003268:	d1d6      	bne.n	8003218 <_svfiprintf_r+0x174>
 800326a:	89ab      	ldrh	r3, [r5, #12]
 800326c:	065b      	lsls	r3, r3, #25
 800326e:	f53f af2d 	bmi.w	80030cc <_svfiprintf_r+0x28>
 8003272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003274:	b01d      	add	sp, #116	; 0x74
 8003276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327a:	ab03      	add	r3, sp, #12
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	462a      	mov	r2, r5
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <_svfiprintf_r+0x1f4>)
 8003282:	a904      	add	r1, sp, #16
 8003284:	4638      	mov	r0, r7
 8003286:	f000 f879 	bl	800337c <_printf_i>
 800328a:	e7eb      	b.n	8003264 <_svfiprintf_r+0x1c0>
 800328c:	080036e0 	.word	0x080036e0
 8003290:	080036ea 	.word	0x080036ea
 8003294:	00000000 	.word	0x00000000
 8003298:	08002ff1 	.word	0x08002ff1
 800329c:	080036e6 	.word	0x080036e6

080032a0 <_printf_common>:
 80032a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a4:	4616      	mov	r6, r2
 80032a6:	4699      	mov	r9, r3
 80032a8:	688a      	ldr	r2, [r1, #8]
 80032aa:	690b      	ldr	r3, [r1, #16]
 80032ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bfb8      	it	lt
 80032b4:	4613      	movlt	r3, r2
 80032b6:	6033      	str	r3, [r6, #0]
 80032b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032bc:	4607      	mov	r7, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	b10a      	cbz	r2, 80032c6 <_printf_common+0x26>
 80032c2:	3301      	adds	r3, #1
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	0699      	lsls	r1, r3, #26
 80032ca:	bf42      	ittt	mi
 80032cc:	6833      	ldrmi	r3, [r6, #0]
 80032ce:	3302      	addmi	r3, #2
 80032d0:	6033      	strmi	r3, [r6, #0]
 80032d2:	6825      	ldr	r5, [r4, #0]
 80032d4:	f015 0506 	ands.w	r5, r5, #6
 80032d8:	d106      	bne.n	80032e8 <_printf_common+0x48>
 80032da:	f104 0a19 	add.w	sl, r4, #25
 80032de:	68e3      	ldr	r3, [r4, #12]
 80032e0:	6832      	ldr	r2, [r6, #0]
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	42ab      	cmp	r3, r5
 80032e6:	dc26      	bgt.n	8003336 <_printf_common+0x96>
 80032e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032ec:	1e13      	subs	r3, r2, #0
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	bf18      	it	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	0692      	lsls	r2, r2, #26
 80032f6:	d42b      	bmi.n	8003350 <_printf_common+0xb0>
 80032f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032fc:	4649      	mov	r1, r9
 80032fe:	4638      	mov	r0, r7
 8003300:	47c0      	blx	r8
 8003302:	3001      	adds	r0, #1
 8003304:	d01e      	beq.n	8003344 <_printf_common+0xa4>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf02      	ittt	eq
 8003312:	68e5      	ldreq	r5, [r4, #12]
 8003314:	6833      	ldreq	r3, [r6, #0]
 8003316:	1aed      	subeq	r5, r5, r3
 8003318:	68a3      	ldr	r3, [r4, #8]
 800331a:	bf0c      	ite	eq
 800331c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003320:	2500      	movne	r5, #0
 8003322:	4293      	cmp	r3, r2
 8003324:	bfc4      	itt	gt
 8003326:	1a9b      	subgt	r3, r3, r2
 8003328:	18ed      	addgt	r5, r5, r3
 800332a:	2600      	movs	r6, #0
 800332c:	341a      	adds	r4, #26
 800332e:	42b5      	cmp	r5, r6
 8003330:	d11a      	bne.n	8003368 <_printf_common+0xc8>
 8003332:	2000      	movs	r0, #0
 8003334:	e008      	b.n	8003348 <_printf_common+0xa8>
 8003336:	2301      	movs	r3, #1
 8003338:	4652      	mov	r2, sl
 800333a:	4649      	mov	r1, r9
 800333c:	4638      	mov	r0, r7
 800333e:	47c0      	blx	r8
 8003340:	3001      	adds	r0, #1
 8003342:	d103      	bne.n	800334c <_printf_common+0xac>
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334c:	3501      	adds	r5, #1
 800334e:	e7c6      	b.n	80032de <_printf_common+0x3e>
 8003350:	18e1      	adds	r1, r4, r3
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	2030      	movs	r0, #48	; 0x30
 8003356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800335a:	4422      	add	r2, r4
 800335c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003364:	3302      	adds	r3, #2
 8003366:	e7c7      	b.n	80032f8 <_printf_common+0x58>
 8003368:	2301      	movs	r3, #1
 800336a:	4622      	mov	r2, r4
 800336c:	4649      	mov	r1, r9
 800336e:	4638      	mov	r0, r7
 8003370:	47c0      	blx	r8
 8003372:	3001      	adds	r0, #1
 8003374:	d0e6      	beq.n	8003344 <_printf_common+0xa4>
 8003376:	3601      	adds	r6, #1
 8003378:	e7d9      	b.n	800332e <_printf_common+0x8e>
	...

0800337c <_printf_i>:
 800337c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	7e0f      	ldrb	r7, [r1, #24]
 8003382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003384:	2f78      	cmp	r7, #120	; 0x78
 8003386:	4691      	mov	r9, r2
 8003388:	4680      	mov	r8, r0
 800338a:	460c      	mov	r4, r1
 800338c:	469a      	mov	sl, r3
 800338e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003392:	d807      	bhi.n	80033a4 <_printf_i+0x28>
 8003394:	2f62      	cmp	r7, #98	; 0x62
 8003396:	d80a      	bhi.n	80033ae <_printf_i+0x32>
 8003398:	2f00      	cmp	r7, #0
 800339a:	f000 80d4 	beq.w	8003546 <_printf_i+0x1ca>
 800339e:	2f58      	cmp	r7, #88	; 0x58
 80033a0:	f000 80c0 	beq.w	8003524 <_printf_i+0x1a8>
 80033a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033ac:	e03a      	b.n	8003424 <_printf_i+0xa8>
 80033ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033b2:	2b15      	cmp	r3, #21
 80033b4:	d8f6      	bhi.n	80033a4 <_printf_i+0x28>
 80033b6:	a101      	add	r1, pc, #4	; (adr r1, 80033bc <_printf_i+0x40>)
 80033b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033bc:	08003415 	.word	0x08003415
 80033c0:	08003429 	.word	0x08003429
 80033c4:	080033a5 	.word	0x080033a5
 80033c8:	080033a5 	.word	0x080033a5
 80033cc:	080033a5 	.word	0x080033a5
 80033d0:	080033a5 	.word	0x080033a5
 80033d4:	08003429 	.word	0x08003429
 80033d8:	080033a5 	.word	0x080033a5
 80033dc:	080033a5 	.word	0x080033a5
 80033e0:	080033a5 	.word	0x080033a5
 80033e4:	080033a5 	.word	0x080033a5
 80033e8:	0800352d 	.word	0x0800352d
 80033ec:	08003455 	.word	0x08003455
 80033f0:	080034e7 	.word	0x080034e7
 80033f4:	080033a5 	.word	0x080033a5
 80033f8:	080033a5 	.word	0x080033a5
 80033fc:	0800354f 	.word	0x0800354f
 8003400:	080033a5 	.word	0x080033a5
 8003404:	08003455 	.word	0x08003455
 8003408:	080033a5 	.word	0x080033a5
 800340c:	080033a5 	.word	0x080033a5
 8003410:	080034ef 	.word	0x080034ef
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	1d1a      	adds	r2, r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	602a      	str	r2, [r5, #0]
 800341c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003424:	2301      	movs	r3, #1
 8003426:	e09f      	b.n	8003568 <_printf_i+0x1ec>
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	0607      	lsls	r7, r0, #24
 800342e:	f103 0104 	add.w	r1, r3, #4
 8003432:	6029      	str	r1, [r5, #0]
 8003434:	d501      	bpl.n	800343a <_printf_i+0xbe>
 8003436:	681e      	ldr	r6, [r3, #0]
 8003438:	e003      	b.n	8003442 <_printf_i+0xc6>
 800343a:	0646      	lsls	r6, r0, #25
 800343c:	d5fb      	bpl.n	8003436 <_printf_i+0xba>
 800343e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003442:	2e00      	cmp	r6, #0
 8003444:	da03      	bge.n	800344e <_printf_i+0xd2>
 8003446:	232d      	movs	r3, #45	; 0x2d
 8003448:	4276      	negs	r6, r6
 800344a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800344e:	485a      	ldr	r0, [pc, #360]	; (80035b8 <_printf_i+0x23c>)
 8003450:	230a      	movs	r3, #10
 8003452:	e012      	b.n	800347a <_printf_i+0xfe>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	1d19      	adds	r1, r3, #4
 800345a:	6029      	str	r1, [r5, #0]
 800345c:	0605      	lsls	r5, r0, #24
 800345e:	d501      	bpl.n	8003464 <_printf_i+0xe8>
 8003460:	681e      	ldr	r6, [r3, #0]
 8003462:	e002      	b.n	800346a <_printf_i+0xee>
 8003464:	0641      	lsls	r1, r0, #25
 8003466:	d5fb      	bpl.n	8003460 <_printf_i+0xe4>
 8003468:	881e      	ldrh	r6, [r3, #0]
 800346a:	4853      	ldr	r0, [pc, #332]	; (80035b8 <_printf_i+0x23c>)
 800346c:	2f6f      	cmp	r7, #111	; 0x6f
 800346e:	bf0c      	ite	eq
 8003470:	2308      	moveq	r3, #8
 8003472:	230a      	movne	r3, #10
 8003474:	2100      	movs	r1, #0
 8003476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800347a:	6865      	ldr	r5, [r4, #4]
 800347c:	60a5      	str	r5, [r4, #8]
 800347e:	2d00      	cmp	r5, #0
 8003480:	bfa2      	ittt	ge
 8003482:	6821      	ldrge	r1, [r4, #0]
 8003484:	f021 0104 	bicge.w	r1, r1, #4
 8003488:	6021      	strge	r1, [r4, #0]
 800348a:	b90e      	cbnz	r6, 8003490 <_printf_i+0x114>
 800348c:	2d00      	cmp	r5, #0
 800348e:	d04b      	beq.n	8003528 <_printf_i+0x1ac>
 8003490:	4615      	mov	r5, r2
 8003492:	fbb6 f1f3 	udiv	r1, r6, r3
 8003496:	fb03 6711 	mls	r7, r3, r1, r6
 800349a:	5dc7      	ldrb	r7, [r0, r7]
 800349c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034a0:	4637      	mov	r7, r6
 80034a2:	42bb      	cmp	r3, r7
 80034a4:	460e      	mov	r6, r1
 80034a6:	d9f4      	bls.n	8003492 <_printf_i+0x116>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d10b      	bne.n	80034c4 <_printf_i+0x148>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	07de      	lsls	r6, r3, #31
 80034b0:	d508      	bpl.n	80034c4 <_printf_i+0x148>
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	6861      	ldr	r1, [r4, #4]
 80034b6:	4299      	cmp	r1, r3
 80034b8:	bfde      	ittt	le
 80034ba:	2330      	movle	r3, #48	; 0x30
 80034bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034c4:	1b52      	subs	r2, r2, r5
 80034c6:	6122      	str	r2, [r4, #16]
 80034c8:	f8cd a000 	str.w	sl, [sp]
 80034cc:	464b      	mov	r3, r9
 80034ce:	aa03      	add	r2, sp, #12
 80034d0:	4621      	mov	r1, r4
 80034d2:	4640      	mov	r0, r8
 80034d4:	f7ff fee4 	bl	80032a0 <_printf_common>
 80034d8:	3001      	adds	r0, #1
 80034da:	d14a      	bne.n	8003572 <_printf_i+0x1f6>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	b004      	add	sp, #16
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	f043 0320 	orr.w	r3, r3, #32
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	4833      	ldr	r0, [pc, #204]	; (80035bc <_printf_i+0x240>)
 80034f0:	2778      	movs	r7, #120	; 0x78
 80034f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	6829      	ldr	r1, [r5, #0]
 80034fa:	061f      	lsls	r7, r3, #24
 80034fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003500:	d402      	bmi.n	8003508 <_printf_i+0x18c>
 8003502:	065f      	lsls	r7, r3, #25
 8003504:	bf48      	it	mi
 8003506:	b2b6      	uxthmi	r6, r6
 8003508:	07df      	lsls	r7, r3, #31
 800350a:	bf48      	it	mi
 800350c:	f043 0320 	orrmi.w	r3, r3, #32
 8003510:	6029      	str	r1, [r5, #0]
 8003512:	bf48      	it	mi
 8003514:	6023      	strmi	r3, [r4, #0]
 8003516:	b91e      	cbnz	r6, 8003520 <_printf_i+0x1a4>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	f023 0320 	bic.w	r3, r3, #32
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	2310      	movs	r3, #16
 8003522:	e7a7      	b.n	8003474 <_printf_i+0xf8>
 8003524:	4824      	ldr	r0, [pc, #144]	; (80035b8 <_printf_i+0x23c>)
 8003526:	e7e4      	b.n	80034f2 <_printf_i+0x176>
 8003528:	4615      	mov	r5, r2
 800352a:	e7bd      	b.n	80034a8 <_printf_i+0x12c>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	6826      	ldr	r6, [r4, #0]
 8003530:	6961      	ldr	r1, [r4, #20]
 8003532:	1d18      	adds	r0, r3, #4
 8003534:	6028      	str	r0, [r5, #0]
 8003536:	0635      	lsls	r5, r6, #24
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	d501      	bpl.n	8003540 <_printf_i+0x1c4>
 800353c:	6019      	str	r1, [r3, #0]
 800353e:	e002      	b.n	8003546 <_printf_i+0x1ca>
 8003540:	0670      	lsls	r0, r6, #25
 8003542:	d5fb      	bpl.n	800353c <_printf_i+0x1c0>
 8003544:	8019      	strh	r1, [r3, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	6123      	str	r3, [r4, #16]
 800354a:	4615      	mov	r5, r2
 800354c:	e7bc      	b.n	80034c8 <_printf_i+0x14c>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	602a      	str	r2, [r5, #0]
 8003554:	681d      	ldr	r5, [r3, #0]
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	2100      	movs	r1, #0
 800355a:	4628      	mov	r0, r5
 800355c:	f7fc fe50 	bl	8000200 <memchr>
 8003560:	b108      	cbz	r0, 8003566 <_printf_i+0x1ea>
 8003562:	1b40      	subs	r0, r0, r5
 8003564:	6060      	str	r0, [r4, #4]
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	2300      	movs	r3, #0
 800356c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003570:	e7aa      	b.n	80034c8 <_printf_i+0x14c>
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	462a      	mov	r2, r5
 8003576:	4649      	mov	r1, r9
 8003578:	4640      	mov	r0, r8
 800357a:	47d0      	blx	sl
 800357c:	3001      	adds	r0, #1
 800357e:	d0ad      	beq.n	80034dc <_printf_i+0x160>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	079b      	lsls	r3, r3, #30
 8003584:	d413      	bmi.n	80035ae <_printf_i+0x232>
 8003586:	68e0      	ldr	r0, [r4, #12]
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	4298      	cmp	r0, r3
 800358c:	bfb8      	it	lt
 800358e:	4618      	movlt	r0, r3
 8003590:	e7a6      	b.n	80034e0 <_printf_i+0x164>
 8003592:	2301      	movs	r3, #1
 8003594:	4632      	mov	r2, r6
 8003596:	4649      	mov	r1, r9
 8003598:	4640      	mov	r0, r8
 800359a:	47d0      	blx	sl
 800359c:	3001      	adds	r0, #1
 800359e:	d09d      	beq.n	80034dc <_printf_i+0x160>
 80035a0:	3501      	adds	r5, #1
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	9903      	ldr	r1, [sp, #12]
 80035a6:	1a5b      	subs	r3, r3, r1
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dcf2      	bgt.n	8003592 <_printf_i+0x216>
 80035ac:	e7eb      	b.n	8003586 <_printf_i+0x20a>
 80035ae:	2500      	movs	r5, #0
 80035b0:	f104 0619 	add.w	r6, r4, #25
 80035b4:	e7f5      	b.n	80035a2 <_printf_i+0x226>
 80035b6:	bf00      	nop
 80035b8:	080036f1 	.word	0x080036f1
 80035bc:	08003702 	.word	0x08003702

080035c0 <memmove>:
 80035c0:	4288      	cmp	r0, r1
 80035c2:	b510      	push	{r4, lr}
 80035c4:	eb01 0402 	add.w	r4, r1, r2
 80035c8:	d902      	bls.n	80035d0 <memmove+0x10>
 80035ca:	4284      	cmp	r4, r0
 80035cc:	4623      	mov	r3, r4
 80035ce:	d807      	bhi.n	80035e0 <memmove+0x20>
 80035d0:	1e43      	subs	r3, r0, #1
 80035d2:	42a1      	cmp	r1, r4
 80035d4:	d008      	beq.n	80035e8 <memmove+0x28>
 80035d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035de:	e7f8      	b.n	80035d2 <memmove+0x12>
 80035e0:	4402      	add	r2, r0
 80035e2:	4601      	mov	r1, r0
 80035e4:	428a      	cmp	r2, r1
 80035e6:	d100      	bne.n	80035ea <memmove+0x2a>
 80035e8:	bd10      	pop	{r4, pc}
 80035ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035f2:	e7f7      	b.n	80035e4 <memmove+0x24>

080035f4 <_sbrk_r>:
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4d06      	ldr	r5, [pc, #24]	; (8003610 <_sbrk_r+0x1c>)
 80035f8:	2300      	movs	r3, #0
 80035fa:	4604      	mov	r4, r0
 80035fc:	4608      	mov	r0, r1
 80035fe:	602b      	str	r3, [r5, #0]
 8003600:	f7fd ffb6 	bl	8001570 <_sbrk>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d102      	bne.n	800360e <_sbrk_r+0x1a>
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	b103      	cbz	r3, 800360e <_sbrk_r+0x1a>
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	bd38      	pop	{r3, r4, r5, pc}
 8003610:	20000230 	.word	0x20000230

08003614 <memcpy>:
 8003614:	440a      	add	r2, r1
 8003616:	4291      	cmp	r1, r2
 8003618:	f100 33ff 	add.w	r3, r0, #4294967295
 800361c:	d100      	bne.n	8003620 <memcpy+0xc>
 800361e:	4770      	bx	lr
 8003620:	b510      	push	{r4, lr}
 8003622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800362a:	4291      	cmp	r1, r2
 800362c:	d1f9      	bne.n	8003622 <memcpy+0xe>
 800362e:	bd10      	pop	{r4, pc}

08003630 <_realloc_r>:
 8003630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	4680      	mov	r8, r0
 8003636:	4614      	mov	r4, r2
 8003638:	460e      	mov	r6, r1
 800363a:	b921      	cbnz	r1, 8003646 <_realloc_r+0x16>
 800363c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003640:	4611      	mov	r1, r2
 8003642:	f7ff bc49 	b.w	8002ed8 <_malloc_r>
 8003646:	b92a      	cbnz	r2, 8003654 <_realloc_r+0x24>
 8003648:	f7ff fbda 	bl	8002e00 <_free_r>
 800364c:	4625      	mov	r5, r4
 800364e:	4628      	mov	r0, r5
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003654:	f000 f81b 	bl	800368e <_malloc_usable_size_r>
 8003658:	4284      	cmp	r4, r0
 800365a:	4607      	mov	r7, r0
 800365c:	d802      	bhi.n	8003664 <_realloc_r+0x34>
 800365e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003662:	d812      	bhi.n	800368a <_realloc_r+0x5a>
 8003664:	4621      	mov	r1, r4
 8003666:	4640      	mov	r0, r8
 8003668:	f7ff fc36 	bl	8002ed8 <_malloc_r>
 800366c:	4605      	mov	r5, r0
 800366e:	2800      	cmp	r0, #0
 8003670:	d0ed      	beq.n	800364e <_realloc_r+0x1e>
 8003672:	42bc      	cmp	r4, r7
 8003674:	4622      	mov	r2, r4
 8003676:	4631      	mov	r1, r6
 8003678:	bf28      	it	cs
 800367a:	463a      	movcs	r2, r7
 800367c:	f7ff ffca 	bl	8003614 <memcpy>
 8003680:	4631      	mov	r1, r6
 8003682:	4640      	mov	r0, r8
 8003684:	f7ff fbbc 	bl	8002e00 <_free_r>
 8003688:	e7e1      	b.n	800364e <_realloc_r+0x1e>
 800368a:	4635      	mov	r5, r6
 800368c:	e7df      	b.n	800364e <_realloc_r+0x1e>

0800368e <_malloc_usable_size_r>:
 800368e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003692:	1f18      	subs	r0, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	bfbc      	itt	lt
 8003698:	580b      	ldrlt	r3, [r1, r0]
 800369a:	18c0      	addlt	r0, r0, r3
 800369c:	4770      	bx	lr
	...

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
